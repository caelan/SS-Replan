(define (domain nvidia-tamp)
  (:requirements :strips :equality)
  (:constants
    @world @gripper @stove
    @open @closed
    @rest_aq ; @calibrate_aq
    @open_gq @closed_gq)
  (:predicates
    (Type ?t ?b)
    (Stackable ?o ?r)
    (Stove ?r)
    (NoisyBase)
    (Obstacle ?o)
    (Counter ?o)
    (Drawer ?o)
    (Entity ?o)
    (Graspable ?o)
    (Joint ?j)

    (CheckNearby ?o)
    (NearPose ?o2 ?wp2 ?bq)
    (NearJoint ?j ?bq)
    (InitBConf ?bq)

    (Pick ?o ?wp ?g ?bq ?aq ?at)
    (Pull ?j ?q1 ?q2 ?bq ?aq1 ?aq2 ?at)
    (BaseMotion ?bq1 ?bq2 ?aq ?bt)
    (ArmMotion ?bq ?aq1 ?aq2 ?at)
    (GripperMotion ?gq1 ?gq2 ?gt)
    (CalibrateMotion ?bq ?aq ?at)

    (Detect ?o ?wp ?r)
    (Sample ?s)
    (Dist ?d)
    (Value ?wp)
    (BeliefUpdate ?rp1 ?obs ?rp2)

    (Grasp ?o ?g)
    (BTraj ?bt)
    (ATraj ?at)
    (BConf ?bq)
    (AConf ?bq ?aq)
    (GConf ?gq)
    (Angle ?j ?a)
    (Ray ?r)

    (CFreeRelPoseRelPose ?o1 ?rp1 ?o2 ?rp2 ?s)
    (CFreeBConfPose ?bq ?o2 ?wp2)
    (CFreeApproachPose ?o1 ?wp1 ?g ?o2 ?wp2)
    (CFreeTrajPose ?t ?o2 ?wp2)
    (CFreeWorldPose ?o1 ?wp1)
    (CFreeWorldPoseWorldPose ?o1 ?wp1 ?o2 ?wp2)

    (OFreeRayPose ?r ?o ?wp)
    (OFreeRayGrasp ?r ?bq ?aq ?o ?g)

    (HandEmpty)
    (AtBConf ?bq)
    (AtAConf ?aq)
    (AtGConf ?gq)
    (AtRelPose ?o1 ?rp ?o2)
    (AtWorldPose ?o ?wp)
    (AtGrasp ?o ?g)
    (AtAngle ?j ?q)

    (CanMoveBase)
    (CanMoveArm)
    (CanMoveGripper)
    (Cooked ?o)
    (Calibrated)
    (Localized ?o)

    (OpenGripper)
    (OpenGConf ?gq)

    (Status ?s)
    (DoorStatus ?j ?s)
    (AngleWithin ?j ?a ?s)

    (On ?o1 ?o2)
    (Holding ?o)
    (Accessible ?o ?wp)
    (Unsafe)
    (UnsafeRelPose ?o ?rp ?s)
    (UnsafeApproach ?o ?wp ?g)
    (UnsafeATraj ?at)
    (OccludedRay ?r)
    (CloseTo ?q1 ?q2)

    (RelPose ?o1 ?rp ?o2)
    (WorldPose ?o ?wp)
    (PoseKin ?o1 ?wp1 ?rp ?o2 ?wp2)
    (Connected ?o ?j)
    (AngleKin ?o ?wp ?j ?a)

    (AdmitsGrasp ?o1 ?g ?o2)
    (IsGraspType ?o ?g ?gty)
    (AdmitsGraspType ?o2 ?gty))
  (:functions
    (Distance ?bq1 ?bq2)
    (MoveBaseCost)
    (MoveArmCost)
    (MoveGripperCost)
    (PickCost)
    (PlaceCost)
    (PullCost)
    (CookCost)
    (DetectCost ?rp1 ?obs ?rp2)
  )

  ; TODO: prevent the robot from moving to the same spot?
  ; TODO: force the search to select new base poses after one manipulation is performed
  ; TODO: robot still needs to recalibrate after no base movement...
  (:action move_base
    ;:parameters (?bq1 ?bq2 ?aq ?bt)
    ;:precondition (and (BaseMotion ?bq1 ?bq2 ?aq ?bt)
    ;                   (AtBConf ?bq1) (AtAConf ?aq)
    :parameters (?bq1 ?bq2 ?bt)
    :precondition (and (BaseMotion ?bq1 ?bq2 @rest_aq ?bt) (not (= ?bq1 ?bq2)) ; Be careful with shared optimistic
                       (AtBConf ?bq1) (AtAConf @rest_aq)
                       (CanMoveBase) (Calibrated)
                       (not (Unsafe)))
    :effect (and (AtBConf ?bq2)
                 (CanMoveArm)
                 (not (AtBConf ?bq1))
                 (not (CanMoveBase))
                 ;(not (Calibrated))
                 ;(when (NoisyBase) (not (Calibrated)))
                 ;(increase (total-cost) (Distance ?bq1 ?bq2)))
                 (increase (total-cost) (MoveBaseCost))))
  (:action move_arm
    :parameters (?bq ?aq1 ?aq2 ?at)
    :precondition (and (ArmMotion ?bq ?aq1 ?aq2 ?at) ; (not (= ?aq1 ?aq2)) ; Be careful with shared optimistic
                       (AtBConf ?bq) (AtAConf ?aq1)
                       (CanMoveArm) (Calibrated) ; TODO: require calibration?
                       (not (Unsafe)))
    :effect (and (AtAConf ?aq2)
                 (not (AtAConf ?aq1)) (not (CanMoveArm))
                 (increase (total-cost) (MoveArmCost))))
  (:action move_gripper
    :parameters (?gq1 ?gq2 ?gt)
    :precondition (and (GripperMotion ?gq1 ?gq2 ?gt) ; (not (= ?gq1 ?gq2))
                       (AtGConf ?gq1) (HandEmpty)
                       ;(CanMoveGripper)
                       (not (Unsafe)))
    :effect (and (AtGConf ?gq2)
                 (not (AtGConf ?gq1)) (not (CanMoveGripper))
                 (increase (total-cost) (MoveGripperCost))))
  ;(:action calibrate
  ;  ;:parameters (?bq ?aq ?at)
  ;  ;:precondition (and (CalibrateMotion ?bq ?aq ?at)
  ;  :parameters ()
  ;  :precondition (and ; (AConf ?bq @calibrate_aq)
  ;                     ; (AtBConf ?bq) (AtAConf @calibrate_aq)
  ;                     ; (not (Calibrated))
  ;                     ; TODO: visibility constraints
  ;                 )
  ;  :effect (and (Calibrated) (CanMoveArm)
  ;               ; (not (AtBConf ?bq)) ; Could make this be a new pose ?bq2
  ;               (increase (total-cost) (CalibrateCost)))
  ;)
  (:action pick
    :parameters (?o1 ?wp1 ?g ?rp ?o2 ?wp2 ?bq ?aq ?gq ?at)
    :precondition (and (Pick ?o1 ?wp1 ?g ?bq ?aq ?at) (PoseKin ?o1 ?wp1 ?rp ?o2 ?wp2) (OpenGConf ?gq)
                       (AtRelPose ?o1 ?rp ?o2) (AtWorldPose ?o1 ?wp1) (HandEmpty)
                       (AtBConf ?bq) (AtAConf ?aq) (AtGConf ?gq)
                       (Calibrated) ; TODO: detect precondition?
                       (Accessible ?o2 ?wp2) (AdmitsGrasp ?o1 ?g ?o2)
                       (not (UnsafeApproach ?o1 ?wp1 ?g))
                       (not (UnsafeATraj ?at))
                       (not (Unsafe)))
    :effect (and (AtGrasp ?o1 ?g)
                 (CanMoveBase) (CanMoveArm)
                 ; (AtGConf @closed_gq) ; No need to save closed state
                 (not (AtGConf ?gq))
                 (Holding ?o1) (not (On ?o1 ?o2))
                 (not (AtRelPose ?o1 ?rp ?o2)) (not (AtWorldPose ?o1 ?wp1))
                 (not (HandEmpty))
                 ; (not (Localized ?o1))
                 (increase (total-cost) (PickCost))))
  (:action place
    :parameters (?o1 ?wp1 ?g ?rp ?o2 ?wp2 ?bq ?aq ?at) ; ?gq
    :precondition (and (Pick ?o1 ?wp1 ?g ?bq ?aq ?at) (PoseKin ?o1 ?wp1 ?rp ?o2 ?wp2) (Value ?wp1) ; (GConf ?gq)
                       (AtGrasp ?o1 ?g) (AtWorldPose ?o2 ?wp2)
                       (AtBConf ?bq) (AtAConf ?aq) ; (AtGConf ?gq)
                       (Calibrated) (Accessible ?o2 ?wp2) (AdmitsGrasp ?o1 ?g ?o2)
                       (not (UnsafeRelPose ?o1 ?rp ?o2))
                       (not (UnsafeApproach ?o1 ?wp1 ?g))
                       (not (UnsafeATraj ?at))
                       (not (Unsafe)))
    :effect (and (AtRelPose ?o1 ?rp ?o2) (AtWorldPose ?o1 ?wp1) (HandEmpty)
                 (On ?o1 ?o2) (not (Holding ?o1))
                 (AtGConf @open_gq) ; (not (AtGConf ?gq))
                 (CanMoveBase) (CanMoveArm)
                 (not (AtGrasp ?o1 ?g))
                 ;(not (Localized ?o1))
                 (increase (total-cost) (PlaceCost))))
  (:action pull
    :parameters (?j ?a1 ?a2 ?o ?wp1 ?wp2 ?bq ?aq1 ?aq2 ?gq ?at)
    :precondition (and (Pull ?j ?a1 ?a2 ?bq ?aq1 ?aq2 ?at) (OpenGConf ?gq)
                       (AngleKin ?o ?wp1 ?j ?a1) (AngleKin ?o ?wp2 ?j ?a2)
                       (AtAngle ?j ?a1) (AtWorldPose ?o ?wp1)
                       (AtBConf ?bq) (AtAConf ?aq1) (AtGConf ?gq)
                       (HandEmpty) (Calibrated)
                       (not (UnsafeATraj ?at))
                       (not (Unsafe)))
    ; TODO: use the full pull trajectory
    :effect (and (AtAngle ?j ?a2) (AtWorldPose ?o ?wp2) (AtAConf ?aq2)
                 ; (AtGConf @open_gq) (not (AtGConf ?gq))
                 (CanMoveBase) (CanMoveArm)
                 ; TODO: could treat both objects and drawers are fixed to the joint
                 (not (AtAngle ?j ?a1)) (not (AtWorldPose ?o ?wp1)) (not (AtAConf ?aq1))
                 (forall (?o3 ?wp3 ?rp3) (when (and (PoseKin ?o3 ?wp3 ?rp3 ?o ?wp1) (AtRelPose ?o3 ?rp3 ?o))
                                               (not (AtWorldPose ?o3 ?wp3))))
                 (forall (?o4 ?wp4 ?rp4) (when (and (PoseKin ?o4 ?wp4 ?rp4 ?o ?wp2) (AtRelPose ?o4 ?rp4 ?o))
                                               (AtWorldPose ?o4 ?wp4)))
                 (increase (total-cost) (PullCost))))
  (:action detect
    :parameters (?o1 ?wp1 ?rp1 ?obs ?wp2 ?rp2 ?o0 ?wp0 ?r)
    :precondition (and (PoseKin ?o1 ?wp1 ?rp1 ?o0 ?wp0) (PoseKin ?o1 ?wp2 ?rp2 ?o0 ?wp0)
                       (Detect ?o1 ?wp2 ?r) (BeliefUpdate ?rp1 ?obs ?rp2)
                       (AtWorldPose ?o1 ?wp1) ; (AtRelPose ?o1 ?rp1 ?o0) (AtWorldPose ?o0 ?wp0)
                       (Accessible ?o0 ?wp0)
                       ; (not (UnsafeRelPose ?o1 ?rp2 ?o0))
                       (not (OccludedRay ?r))
                       (not (Unsafe)))
    :effect (and (Localized ?o1) (On ?o1 ?o0)
                 (AtRelPose ?o1 ?rp2 ?o0) (AtWorldPose ?o1 ?wp2)
                 ;(not (AtRelPose ?o1 ?rp1 ?o0)) (not (AtWorldPose ?o1 ?wp1))
                 (forall (?rp3) (when (and (RelPose ?o1 ?rp3 ?o0) (AtRelPose ?o3 ?rp3 ?o0))
                                      (not (AtRelPose ?o3 ?rp3 ?o0))))
                 (forall (?wp3) (when (and (WorldPose ?o1 ?wp1) (AtWorldPose ?o1 ?wp1))
                                      (not (AtWorldPose ?o1 ?wp1))))
                 (increase (total-cost) (DetectCost ?rp1 ?obs ?rp2))))

  ;(:action cook
  ;  :parameters (?r)
  ;  :precondition (Type ?r @stove)
  ;  :effect (and (forall (?o) (when (On ?o ?r) (Cooked ?o)))
  ;               (increase (total-cost) (CookCost)))
  ;)
  ;(:derived (OpenGripper)
  ;  ;(AtGConf @open_gq)
  ;  (exists (?gq) (and (OpenGConf ?gq)
  ;                     (AtGConf ?gq)))
  ;)

  (:derived (Accessible ?o ?wp) (or
    (and (WorldPose ?o ?wp) (Counter ?o))
    (exists (?j ?a) (and (AngleKin ?o ?wp ?j ?a) (AngleWithin ?j ?a @open)
                         (AtAngle ?j ?a)))))

  ; https://github.mit.edu/mtoussai/KOMO-stream/blob/master/03-Caelans-pddlstreamExample/retired/domain.pddl
  ;(:derived (AtWorldPose ?o1 ?wp1) (or
  ;  (and (RelPose ?o1 ?wp1 @world)
  ;       (AtRelPose ?o1 ?wp1 @world))
  ;  (exists (?rp ?o2 ?wp2) (and (PoseKin ?o1 ?wp1 ?rp ?o2 ?wp2)
  ;          (AtWorldPose ?o2 ?wp2) (AtRelPose ?o1 ?rp ?o2)))
  ;  (exists (?j ?a) (and (AngleKin ?o1 ?wp1 ?j ?a)
  ;          (AtAngle ?j ?a))) ; TODO: could compose arbitrary chains
  ;))

  ; TODO: general debug condition that disables these
  (:derived (Unsafe) (or
     (exists (?o1 ?wp1) (and (WorldPose ?o1 ?wp1) (Entity ?o1)
                             (not (CFreeWorldPose ?o1 ?wp1))
                             (AtWorldPose ?o1 ?wp1)))
     (exists (?o1 ?wp1 ?o2 ?wp2) (and (WorldPose ?o1 ?wp1) (WorldPose ?o2 ?wp2)
                                      (Entity ?o1) (Drawer ?o2)
                                      (not (CFreeWorldPoseWorldPose ?o1 ?wp1 ?o2 ?wp2))
                                      (AtWorldPose ?o1 ?wp1) (AtWorldPose ?o2 ?wp2)))
     (exists (?bq ?o2 ?wp2) (and (BConf ?bq) (WorldPose ?o2 ?wp2) (Drawer ?o2)
                                 (not (CFreeBConfPose ?bq ?o2 ?wp2))
                                 (AtBConf ?bq) (AtWorldPose ?o2 ?wp2)))))
  (:derived (UnsafeRelPose ?o1 ?rp1 ?s) (and (RelPose ?o1 ?rp1 ?s) (Entity ?o1)
    (exists (?o2 ?rp2) (and (RelPose ?o2 ?rp2 ?s) (Entity ?o2) (not (= ?o1 ?o2))
                            (not (CFreeRelPoseRelPose ?o1 ?rp1 ?o2 ?rp2 ?s))
                            (AtRelPose ?o2 ?rp2 ?s)))
  ))
  (:derived (UnsafeApproach ?o1 ?wp1 ?g) (and (WorldPose ?o1 ?wp1) (Grasp ?o1 ?g)
    (exists (?o2 ?wp2) (and (WorldPose ?o2 ?wp2) (Obstacle ?o2) (not (= ?o1 ?o2))
                           (not (CFreeApproachPose ?o1 ?wp1 ?g ?o2 ?wp2))
                           (AtWorldPose ?o2 ?wp2)))
  ))
  (:derived (UnsafeATraj ?at) (and (ATraj ?at)
    (exists (?o2 ?wp2) (and (WorldPose ?o2 ?wp2) (Obstacle ?o2)
                            (not (CFreeTrajPose ?at ?o2 ?wp2))
                            (AtWorldPose ?o2 ?wp2)))
  ))
  (:derived (OccludedRay ?r) (and (Ray ?r) (or
    (exists (?o ?wp) (and (WorldPose ?o ?wp) (Obstacle ?o)
                         (not (OFreeRayPose ?r ?o ?wp))
                         (AtWorldPose ?o ?wp)))
    (exists (?bq ?aq ?o ?g) (and (AConf ?bq ?aq) (Grasp ?o ?g)
                                 (not (OFreeRayGrasp ?r ?bq ?aq ?o ?g))
                                 (AtBConf ?bq) (AtAConf ?aq) (AtGrasp ?o ?g)))
  )))
)