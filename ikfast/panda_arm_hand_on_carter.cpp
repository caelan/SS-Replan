/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2019-07-14 18:54:18.011319
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKsin(j[6]);
x14=((0.707106781186548)*x13);
x15=((0.207)*x8);
x16=((0.0825)*x0);
x17=((0.207)*x7);
x18=((1.0)*x7);
x19=((1.0)*x4);
x20=((1.0)*x5);
x21=((0.0825)*x4);
x22=((0.088)*x8);
x23=((0.707106781186548)*x10);
x24=((0.088)*x7);
x25=((0.088)*x9);
x26=((0.316)*x6);
x27=((0.384)*x4);
x28=((0.088)*x5);
x29=((0.207)*x5);
x30=((0.207)*x9);
x31=(x6*x7);
x32=(x1*x3);
x33=(x2*x6);
x34=(x0*x2);
x35=(x0*x3);
x36=(x1*x7);
x37=(x3*x6);
x38=((-1.0)*x12);
x39=(x0*x6);
x40=(x1*x5);
x41=(x19*x2);
x42=(x2*x21);
x43=(x16*x2);
x44=(x4*x5*x6);
x45=(x16*x32);
x46=(x1*x41);
x47=(x21*x32);
x48=((((-1.0)*x46))+x35);
x49=((((-1.0)*x20*x37))+x36);
x50=(((x3*x31))+x40);
x51=((((-1.0)*x0*x32))+x41);
x52=(((x19*x3))+(((1.0)*x1*x34)));
x53=((-1.0)*x52);
x54=((((-1.0)*x34))+(((-1.0)*x19*x32)));
x55=(x47+x43);
x56=(x11*x50);
x57=(x54*x7);
x58=(x53*x8);
x59=(((x5*(((((-1.0)*x41))+((x0*x32))))))+((x0*x31)));
x60=(((x31*x4))+((x5*((((x32*x4))+x34)))));
x61=(((x33*x8))+((x49*x9)));
x62=((((-1.0)*x33*x9))+((x49*x8)));
x63=(((x51*x7))+((x39*x5)));
x64=(x44+x57);
x65=(x59*x9);
x66=(x60*x9);
x67=(x12*x61);
x68=(x14*x62);
x69=(x23*x62);
x70=(x11*x63);
x71=(x11*x64);
x72=(x66+((x48*x8)));
x73=(((x60*x8))+((x9*(((((-1.0)*x35))+x46)))));
x74=(x58+x65);
x75=(((x59*x8))+((x52*x9)));
x76=(x12*x72);
x77=(x23*((x56+x67)));
x78=(x23*x73);
x79=(x14*x73);
x80=(x12*x74);
x81=(x23*x75);
x82=(x14*x75);
x83=(x14*((((x38*x61))+(((-1.0)*x56)))));
x84=(x77+x68);
x85=(x23*((x76+x71)));
x86=(x69+x83);
x87=(x23*((x70+x80)));
x88=(x14*(((((-1.0)*x71))+(((-1.0)*x76)))));
x89=(x14*((((x38*x74))+(((-1.0)*x70)))));
x90=(x79+x85);
x91=(x82+x87);
x92=(x78+x88);
x93=(x89+x81);
eerot[0]=(x93+(((-1.0)*x91)));
eerot[1]=((((-1.0)*x91))+(((-1.0)*x93)));
eerot[2]=(((x12*(((((-1.0)*x18*x51))+(((-1.0)*x20*x39))))))+((x11*x74)));
eetrans[0]=((-0.035)+(((-1.0)*x42))+((x0*x26))+((x5*(((((-1.0)*x45))+x42))))+((x11*((((x15*x53))+((x30*x59))))))+(((-1.0)*x16*x31))+x45+((x12*(((((-1.0)*x29*x39))+(((-1.0)*x17*x51))))))+((x12*((((x25*x59))+((x22*x53))))))+((x11*((((x28*x39))+((x24*x51))))))+((x7*(((((-0.384)*x0*x32))+((x2*x27))))))+(((0.384)*x39*x5)));
eerot[3]=(x92+(((-1.0)*x90)));
eerot[4]=((((-1.0)*x92))+(((-1.0)*x90)));
eerot[5]=(((x12*(((((-1.0)*x18*x54))+(((-1.0)*x19*x5*x6))))))+((x11*x72)));
IkReal x94=(x4*x6);
eetrans[1]=(((x12*((((x22*x48))+((x25*x60))))))+(((-1.0)*x5*x55))+((x7*(((((-1.0)*x27*x32))+(((-0.384)*x34))))))+x55+(((-1.0)*x21*x31))+((x11*((((x24*x54))+((x28*x94))))))+((x26*x4))+((x11*((((x15*x48))+((x30*x60))))))+((x12*(((((-1.0)*x29*x94))+(((-1.0)*x17*x54))))))+((x27*x5*x6)));
eerot[6]=(x86+(((-1.0)*x84)));
eerot[7]=((((-1.0)*x86))+(((-1.0)*x84)));
eerot[8]=(((x11*x61))+((x12*(((((-1.0)*x18*x37))+(((-1.0)*x1*x20)))))));
IkReal x95=((0.0825)*x37);
eetrans[2]=((0.858)+((x11*((((x15*x33))+((x30*x49))))))+((x12*((((x22*x33))+((x25*x49))))))+((x11*((((x1*x28))+((x24*x37))))))+((x12*(((((-1.0)*x1*x29))+(((-1.0)*x17*x37))))))+(((0.384)*x40))+(((0.384)*x3*x31))+(((-0.0825)*x36))+(((-1.0)*x95))+((x5*x95))+(((0.316)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j9,cj9,sj9,htj9,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij9[2], _nj9;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1;  _ij9[0] = -1; _ij9[1] = -1; _nj9 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j9=pfree[0]; cj9=cos(pfree[0]); sj9=sin(pfree[0]), htj9=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.707106781186548)*r01))+(((-0.707106781186548)*r00)));
new_r01=((((-0.707106781186548)*r01))+(((0.707106781186548)*r00)));
new_r02=r02;
new_px=((0.035)+(((-0.207)*r02))+px);
new_r10=((((-0.707106781186548)*r11))+(((-0.707106781186548)*r10)));
new_r11=((((-0.707106781186548)*r11))+(((0.707106781186548)*r10)));
new_r12=r12;
new_py=((((-0.207)*r12))+py);
new_r20=((((-0.707106781186548)*r20))+(((-0.707106781186548)*r21)));
new_r21=((((-0.707106781186548)*r21))+(((0.707106781186548)*r20)));
new_r22=r22;
new_pz=((-0.858)+pz+(((-0.207)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x96=((1.0)*px);
IkReal x97=((1.0)*pz);
IkReal x98=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x98))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x97)));
rxp0_2=((((-1.0)*r10*x96))+((py*r00)));
rxp1_0=((((-1.0)*r21*x98))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x97)));
rxp1_2=((((-1.0)*r11*x96))+((py*r01)));
rxp2_0=((((-1.0)*r22*x98))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x97)));
rxp2_2=((((-1.0)*r12*x96))+((py*r02)));
{
IkReal j12eval[2];
j12eval[0]=((npx*npx)+(npy*npy));
j12eval[1]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j10, j11, j12]

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x101 = IKatan2WithCheck(IkReal(((-0.176)*npx)),IkReal(((0.176)*npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x101.valid){
continue;
}
IkReal x99=((1.0)*(x101.value));
if((((((0.030976)*(npx*npx)))+(((0.030976)*(npy*npy))))) < -0.00001)
continue;
CheckValue<IkReal> x102=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.030976)*(npx*npx)))+(((0.030976)*(npy*npy)))))),-1);
if(!x102.valid){
continue;
}
if( (((x102.value)*(((-0.2531805)+(((0.1155)*sj9))+(((-0.2290755)*cj9))+pp)))) < -1-IKFAST_SINCOS_THRESH || (((x102.value)*(((-0.2531805)+(((0.1155)*sj9))+(((-0.2290755)*cj9))+pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x100=IKasin(((x102.value)*(((-0.2531805)+(((0.1155)*sj9))+(((-0.2290755)*cj9))+pp))));
j12array[0]=((((-1.0)*x99))+(((-1.0)*x100)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+x100+(((-1.0)*x99)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j11eval[2];
IkReal x103=(npy*sj12);
IkReal x104=(cj12*npx);
j11eval[0]=((1.0)+(((129.132231404959)*(x103*x103)))+(((-22.7272727272727)*x104))+(((22.7272727272727)*x103))+(((129.132231404959)*(x104*x104)))+(((-258.264462809917)*x103*x104))+(((129.132231404959)*(npz*npz))));
j11eval[1]=((IKabs(npz))+(IKabs(((0.088)+x103+(((-1.0)*x104))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
j10eval[0]=((-1.0)+cj9+(((3.83030303030303)*sj9)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.63084142381503)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
sj10array[0]=((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12)));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j11eval[3];
sj9=0.48883274;
cj9=-0.87237753;
j9=2.63084416569479;
IkReal x105=cj10*cj10;
j11eval[0]=((-3.11958166835554e+16)+(((-1.0)*x105)));
j11eval[1]=IKsign(((-1.849599971168e+20)+(((-5929.0)*x105))));
j11eval[2]=((IKabs(((1.91141811383168e+20)+(((-1.54545453340909e+22)*pp))+(((15400000000000.0)*cj10*npz)))))+(IKabs(((((-1082199969942.44)*cj10))+(((87500000000000.0)*cj10*pp))+(((2.7199999788e+21)*npz))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj9=0.48883274;
cj9=-0.87237753;
j9=2.63084416569479;
j11eval[0]=((3.11958166835554e+16)+(cj10*cj10));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj9=0.48883274;
cj9=-0.87237753;
j9=2.63084416569479;
j11eval[0]=((-12411805.933972)+((cj10*npz))+(((1003541904.8111)*pp)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x106=IKPowWithIntegerCheck(npz,-1);
if(!x106.valid){
continue;
}
IkReal gconst0=((5.01770952405549e-6)*(x106.value)*(((2473599931297.0)+(((-200000000000000.0)*pp)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj10)))))+(IKabs(((((-1.0)*gconst0))+cj10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
sj9=0.48883274;
cj9=-0.87237753;
j9=2.63084416569479;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
sj10=IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))));
cj10=gconst0;
if( (gconst0) < -1-IKFAST_SINCOS_THRESH || (gconst0) > 1+IKFAST_SINCOS_THRESH )
    continue;
j10=IKacos(gconst0);
CheckValue<IkReal> x107=IKPowWithIntegerCheck(npz,-1);
if(!x107.valid){
continue;
}
IkReal gconst0=((5.01770952405549e-6)*(x107.value)*(((2473599931297.0)+(((-200000000000000.0)*pp)))));
CheckValue<IkReal> x109=IKPowWithIntegerCheck(npz,-1);
if(!x109.valid){
continue;
}
IkReal x108=x109.value;
j11eval[0]=((IKabs(((((-4.0e+28)*x108*(pp*pp)))+(((-6.11869662011252e+24)*x108))+(((1.23904e+27)*npz))+(((9.894399725188e+26)*pp*x108)))))+(((455529.415315156)*(IKabs(((3.82283622766336e+20)+(((-3.09090906681818e+22)*pp))))))));
IkReal x110=((2473599931297.0)+(((-200000000000000.0)*pp)));
j11eval[1]=IKsign(((-1.849599971168e+20)+(((-1.49276857177169e-7)*(x108*x108)*(x110*x110)))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x111=gconst0*gconst0;
CheckValue<IkReal> x112=IKPowWithIntegerCheck(((2.0345599682848e+21)+(((65219.0)*x111))),-1);
if(!x112.valid){
continue;
}
CheckValue<IkReal> x113=IKPowWithIntegerCheck(((-1.849599971168e+20)+(((-5929.0)*x111))),-1);
if(!x113.valid){
continue;
}
if( IKabs(((x112.value)*(((-2.10255992521485e+21)+(((1.69999998675e+23)*pp))+(((-169400000000000.0)*gconst0*npz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x113.value)*(((((-1082199969942.44)*gconst0))+(((87500000000000.0)*gconst0*pp))+(((2.7199999788e+21)*npz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x112.value)*(((-2.10255992521485e+21)+(((1.69999998675e+23)*pp))+(((-169400000000000.0)*gconst0*npz))))))+IKsqr(((x113.value)*(((((-1082199969942.44)*gconst0))+(((87500000000000.0)*gconst0*pp))+(((2.7199999788e+21)*npz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x112.value)*(((-2.10255992521485e+21)+(((1.69999998675e+23)*pp))+(((-169400000000000.0)*gconst0*npz))))), ((x113.value)*(((((-1082199969942.44)*gconst0))+(((87500000000000.0)*gconst0*pp))+(((2.7199999788e+21)*npz))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x114=IKsin(j11);
IkReal x115=IKcos(j11);
IkReal x116=((5.68181818181818)*pp);
IkReal x117=((1.0)*npz);
IkReal x118=((3.85e-10)*gconst0);
IkReal x119=(gconst0*x115);
evalcond[0]=((-0.012367999656485)+pp+(((6.776e-11)*x119))+(((-0.01196799990672)*x114)));
evalcond[1]=((((-1.0)*x117))+(((-1.0)*x114*x118))+(((-0.06799999947)*x115)));
evalcond[2]=((0.0702727253209375)+(((-1.0)*x116))+(((-1.0)*x115*x118))+(((0.06799999947)*x114)));
evalcond[3]=((0.06799999947)+(((0.0702727253209375)*x114))+(((-1.0)*x114*x116))+((npz*x115)));
evalcond[4]=((((0.0702727253209375)*x115))+(((-1.0)*x118))+(((-1.0)*x115*x116))+(((-1.0)*x114*x117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x664 = IKatan2WithCheck(IkReal(((1.91141811383168e+20)+(((15400000000000.0)*gconst0*npz))+(((-1.54545453340909e+22)*pp)))),IkReal(((((-1082199969942.44)*gconst0))+(((87500000000000.0)*gconst0*pp))+(((2.7199999788e+21)*npz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665=IKPowWithIntegerCheck(IKsign(((-1.849599971168e+20)+(((-5929.0)*(gconst0*gconst0))))),-1);
if(!x665.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x664.value)+(((1.5707963267949)*(x665.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x666=IKsin(j11);
IkReal x667=IKcos(j11);
IkReal x668=((5.68181818181818)*pp);
IkReal x669=((1.0)*npz);
IkReal x670=((3.85e-10)*gconst0);
IkReal x671=(gconst0*x667);
evalcond[0]=((-0.012367999656485)+(((6.776e-11)*x671))+(((-0.01196799990672)*x666))+pp);
evalcond[1]=((((-0.06799999947)*x667))+(((-1.0)*x666*x670))+(((-1.0)*x669)));
evalcond[2]=((0.0702727253209375)+(((-1.0)*x667*x670))+(((-1.0)*x668))+(((0.06799999947)*x666)));
evalcond[3]=((0.06799999947)+(((0.0702727253209375)*x666))+(((-1.0)*x666*x668))+((npz*x667)));
evalcond[4]=((((0.0702727253209375)*x667))+(((-1.0)*x666*x669))+(((-1.0)*x667*x668))+(((-1.0)*x670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x672=IKPowWithIntegerCheck(npz,-1);
if(!x672.valid){
continue;
}
IkReal gconst0=((5.01770952405549e-6)*(x672.value)*(((2473599931297.0)+(((-200000000000000.0)*pp)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj10)))))+(IKabs(((((-1.0)*gconst0))+cj10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
sj9=0.48883274;
cj9=-0.87237753;
j9=2.63084416569479;
if((((1.0)+(((-1.0)*(gconst0*gconst0))))) < -0.00001)
continue;
sj10=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst0*gconst0)))))));
cj10=gconst0;
if( (gconst0) < -1-IKFAST_SINCOS_THRESH || (gconst0) > 1+IKFAST_SINCOS_THRESH )
    continue;
j10=((-1.0)*(IKacos(gconst0)));
CheckValue<IkReal> x673=IKPowWithIntegerCheck(npz,-1);
if(!x673.valid){
continue;
}
IkReal gconst0=((5.01770952405549e-6)*(x673.value)*(((2473599931297.0)+(((-200000000000000.0)*pp)))));
CheckValue<IkReal> x675=IKPowWithIntegerCheck(npz,-1);
if(!x675.valid){
continue;
}
IkReal x674=x675.value;
j11eval[0]=((((455529.415315156)*(IKabs(((3.82283622766336e+20)+(((-3.09090906681818e+22)*pp)))))))+(IKabs(((((9.894399725188e+26)*pp*x674))+(((1.23904e+27)*npz))+(((-4.0e+28)*x674*(pp*pp)))+(((-6.11869662011252e+24)*x674))))));
IkReal x676=((2473599931297.0)+(((-200000000000000.0)*pp)));
j11eval[1]=IKsign(((-1.849599971168e+20)+(((-1.49276857177169e-7)*(x674*x674)*(x676*x676)))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x677=gconst0*gconst0;
CheckValue<IkReal> x678=IKPowWithIntegerCheck(((2.0345599682848e+21)+(((65219.0)*x677))),-1);
if(!x678.valid){
continue;
}
CheckValue<IkReal> x679=IKPowWithIntegerCheck(((-1.849599971168e+20)+(((-5929.0)*x677))),-1);
if(!x679.valid){
continue;
}
if( IKabs(((x678.value)*(((-2.10255992521485e+21)+(((1.69999998675e+23)*pp))+(((-169400000000000.0)*gconst0*npz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x679.value)*(((((-1082199969942.44)*gconst0))+(((87500000000000.0)*gconst0*pp))+(((2.7199999788e+21)*npz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x678.value)*(((-2.10255992521485e+21)+(((1.69999998675e+23)*pp))+(((-169400000000000.0)*gconst0*npz))))))+IKsqr(((x679.value)*(((((-1082199969942.44)*gconst0))+(((87500000000000.0)*gconst0*pp))+(((2.7199999788e+21)*npz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x678.value)*(((-2.10255992521485e+21)+(((1.69999998675e+23)*pp))+(((-169400000000000.0)*gconst0*npz))))), ((x679.value)*(((((-1082199969942.44)*gconst0))+(((87500000000000.0)*gconst0*pp))+(((2.7199999788e+21)*npz))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x680=IKsin(j11);
IkReal x681=IKcos(j11);
IkReal x682=((5.68181818181818)*pp);
IkReal x683=((1.0)*npz);
IkReal x684=((3.85e-10)*gconst0);
IkReal x685=(gconst0*x681);
evalcond[0]=((-0.012367999656485)+(((-0.01196799990672)*x680))+(((6.776e-11)*x685))+pp);
evalcond[1]=((((-1.0)*x680*x684))+(((-1.0)*x683))+(((-0.06799999947)*x681)));
evalcond[2]=((0.0702727253209375)+(((-1.0)*x681*x684))+(((-1.0)*x682))+(((0.06799999947)*x680)));
evalcond[3]=((0.06799999947)+(((0.0702727253209375)*x680))+(((-1.0)*x680*x682))+((npz*x681)));
evalcond[4]=((((-1.0)*x681*x682))+(((0.0702727253209375)*x681))+(((-1.0)*x680*x683))+(((-1.0)*x684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x686 = IKatan2WithCheck(IkReal(((1.91141811383168e+20)+(((15400000000000.0)*gconst0*npz))+(((-1.54545453340909e+22)*pp)))),IkReal(((((-1082199969942.44)*gconst0))+(((87500000000000.0)*gconst0*pp))+(((2.7199999788e+21)*npz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x686.valid){
continue;
}
CheckValue<IkReal> x687=IKPowWithIntegerCheck(IKsign(((-1.849599971168e+20)+(((-5929.0)*(gconst0*gconst0))))),-1);
if(!x687.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x686.value)+(((1.5707963267949)*(x687.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x688=IKsin(j11);
IkReal x689=IKcos(j11);
IkReal x690=((5.68181818181818)*pp);
IkReal x691=((1.0)*npz);
IkReal x692=((3.85e-10)*gconst0);
IkReal x693=(gconst0*x689);
evalcond[0]=((-0.012367999656485)+(((-0.01196799990672)*x688))+pp+(((6.776e-11)*x693)));
evalcond[1]=((((-1.0)*x688*x692))+(((-1.0)*x691))+(((-0.06799999947)*x689)));
evalcond[2]=((0.0702727253209375)+(((0.06799999947)*x688))+(((-1.0)*x690))+(((-1.0)*x689*x692)));
evalcond[3]=((0.06799999947)+(((0.0702727253209375)*x688))+((npz*x689))+(((-1.0)*x688*x690)));
evalcond[4]=((((0.0702727253209375)*x689))+(((-1.0)*x688*x691))+(((-1.0)*x692))+(((-1.0)*x689*x690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x694=(cj10*npz);
CheckValue<IkReal> x695=IKPowWithIntegerCheck(((-4.77854528457921e+19)+(((3850000000000.0)*x694))+(((3.86363633352273e+21)*pp))),-1);
if(!x695.valid){
continue;
}
CheckValue<IkReal> x696=IKPowWithIntegerCheck(((-9.55709056915841e+19)+(((7.72727266704545e+21)*pp))+(((7700000000000.0)*x694))),-1);
if(!x696.valid){
continue;
}
if( IKabs(((x695.value)*(((4.62399992792e+19)+(((-1.0e+22)*(npz*npz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x696.value)*(((((-523599995919.0)*cj10))+(((-1.13636363636364e+23)*npz*pp))+(((1.40545450641875e+21)*npz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x695.value)*(((4.62399992792e+19)+(((-1.0e+22)*(npz*npz)))))))+IKsqr(((x696.value)*(((((-523599995919.0)*cj10))+(((-1.13636363636364e+23)*npz*pp))+(((1.40545450641875e+21)*npz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x695.value)*(((4.62399992792e+19)+(((-1.0e+22)*(npz*npz)))))), ((x696.value)*(((((-523599995919.0)*cj10))+(((-1.13636363636364e+23)*npz*pp))+(((1.40545450641875e+21)*npz))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x697=IKcos(j11);
IkReal x698=IKsin(j11);
IkReal x699=((3.85e-10)*cj10);
IkReal x700=((5.68181818181818)*pp);
IkReal x701=((1.0)*npz);
evalcond[0]=((-0.012367999656485)+(((6.776e-11)*cj10*x697))+(((-0.01196799990672)*x698))+pp);
evalcond[1]=((((-0.06799999947)*x697))+(((-1.0)*x701))+(((-1.0)*x698*x699)));
evalcond[2]=((0.0702727253209375)+(((-1.0)*x697*x699))+(((-1.0)*x700))+(((0.06799999947)*x698)));
evalcond[3]=((0.06799999947)+((npz*x697))+(((-1.0)*x698*x700))+(((0.0702727253209375)*x698)));
evalcond[4]=((((-1.0)*x699))+(((-1.0)*x698*x701))+(((-1.0)*x697*x700))+(((0.0702727253209375)*x697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x702=cj10*cj10;
CheckValue<IkReal> x703=IKPowWithIntegerCheck(((2.0345599682848e+21)+(((65219.0)*x702))),-1);
if(!x703.valid){
continue;
}
CheckValue<IkReal> x704=IKPowWithIntegerCheck(((-1.849599971168e+20)+(((-5929.0)*x702))),-1);
if(!x704.valid){
continue;
}
if( IKabs(((x703.value)*(((-2.10255992521485e+21)+(((1.69999998675e+23)*pp))+(((-169400000000000.0)*cj10*npz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x704.value)*(((((-1082199969942.44)*cj10))+(((87500000000000.0)*cj10*pp))+(((2.7199999788e+21)*npz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x703.value)*(((-2.10255992521485e+21)+(((1.69999998675e+23)*pp))+(((-169400000000000.0)*cj10*npz))))))+IKsqr(((x704.value)*(((((-1082199969942.44)*cj10))+(((87500000000000.0)*cj10*pp))+(((2.7199999788e+21)*npz))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x703.value)*(((-2.10255992521485e+21)+(((1.69999998675e+23)*pp))+(((-169400000000000.0)*cj10*npz))))), ((x704.value)*(((((-1082199969942.44)*cj10))+(((87500000000000.0)*cj10*pp))+(((2.7199999788e+21)*npz))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x705=IKcos(j11);
IkReal x706=IKsin(j11);
IkReal x707=((3.85e-10)*cj10);
IkReal x708=((5.68181818181818)*pp);
IkReal x709=((1.0)*npz);
evalcond[0]=((-0.012367999656485)+(((-0.01196799990672)*x706))+pp+(((6.776e-11)*cj10*x705)));
evalcond[1]=((((-0.06799999947)*x705))+(((-1.0)*x706*x707))+(((-1.0)*x709)));
evalcond[2]=((0.0702727253209375)+(((0.06799999947)*x706))+(((-1.0)*x708))+(((-1.0)*x705*x707)));
evalcond[3]=((0.06799999947)+(((-1.0)*x706*x708))+((npz*x705))+(((0.0702727253209375)*x706)));
evalcond[4]=((((-1.0)*x706*x709))+(((-1.0)*x707))+(((-1.0)*x705*x708))+(((0.0702727253209375)*x705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x710=IKPowWithIntegerCheck(IKsign(((-1.849599971168e+20)+(((-5929.0)*(cj10*cj10))))),-1);
if(!x710.valid){
continue;
}
CheckValue<IkReal> x711 = IKatan2WithCheck(IkReal(((1.91141811383168e+20)+(((-1.54545453340909e+22)*pp))+(((15400000000000.0)*cj10*npz)))),IkReal(((((-1082199969942.44)*cj10))+(((87500000000000.0)*cj10*pp))+(((2.7199999788e+21)*npz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x711.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x710.value)))+(x711.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x712=IKcos(j11);
IkReal x713=IKsin(j11);
IkReal x714=((3.85e-10)*cj10);
IkReal x715=((5.68181818181818)*pp);
IkReal x716=((1.0)*npz);
evalcond[0]=((-0.012367999656485)+(((-0.01196799990672)*x713))+pp+(((6.776e-11)*cj10*x712)));
evalcond[1]=((((-0.06799999947)*x712))+(((-1.0)*x716))+(((-1.0)*x713*x714)));
evalcond[2]=((0.0702727253209375)+(((0.06799999947)*x713))+(((-1.0)*x715))+(((-1.0)*x712*x714)));
evalcond[3]=((0.06799999947)+((npz*x712))+(((0.0702727253209375)*x713))+(((-1.0)*x713*x715)));
evalcond[4]=((((-1.0)*x714))+(((0.0702727253209375)*x712))+(((-1.0)*x712*x715))+(((-1.0)*x713*x716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
CheckValue<IkReal> x717=IKPowWithIntegerCheck(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9))),-1);
if(!x717.valid){
continue;
}
sj10array[0]=((-1.0)*(x717.value)*(((((-1.0)*cj12*npy))+(((-1.0)*npx*sj12)))));
if( sj10array[0] >= -1-IKFAST_SINCOS_THRESH && sj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKasin(sj10array[0]);
    cj10array[0] = IKcos(j10array[0]);
    sj10array[1] = sj10array[0];
    j10array[1] = j10array[0] > 0 ? (IKPI-j10array[0]) : (-IKPI-j10array[0]);
    cj10array[1] = -cj10array[0];
}
else if( isnan(sj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j11eval[2];
IkReal x718=(cj10*npz);
IkReal x719=(npy*sj12);
IkReal x720=((43.5261707988981)*cj9);
IkReal x721=((11.3636363636364)*sj9);
IkReal x722=(cj12*npx);
IkReal x723=((0.316)*cj9);
IkReal x724=((0.0825)*sj9);
j11eval[0]=((-4.65454545454545)+((x720*x722))+sj9+(((11.3636363636364)*x718))+(((-11.3636363636364)*cj9*x718))+(((-43.5261707988981)*sj9*x718))+(((52.8925619834711)*x722))+(((-1.0)*x721*x722))+((x719*x721))+(((-52.8925619834711)*x719))+(((-1.0)*x719*x720))+(((-3.83030303030303)*cj9)));
j11eval[1]=IKsign(((-0.033792)+(((-1.0)*x722*x724))+((x722*x723))+(((-0.027808)*cj9))+(((-0.0825)*cj9*x718))+(((0.00726)*sj9))+(((0.384)*x722))+(((-0.384)*x719))+(((-0.316)*sj9*x718))+((x719*x724))+(((-1.0)*x719*x723))+(((0.0825)*x718))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x725=(npz*sj9);
IkReal x726=(cj10*sj9);
IkReal x727=(cj9*npz);
IkReal x728=(cj12*npx);
IkReal x729=(cj10*cj9);
IkReal x730=((11.3636363636364)*cj10);
IkReal x731=(npy*sj12);
IkReal x732=((0.0825)*x731);
IkReal x733=((0.0825)*cj10*x728);
j11eval[0]=(((x728*x730))+(((11.3636363636364)*x725))+(((-43.5261707988981)*x727))+(((3.83030303030303)*x726))+(((-1.0)*x730*x731))+(((43.5261707988981)*x726*x731))+x729+(((11.3636363636364)*x729*x731))+(((-1.0)*cj10))+(((-52.8925619834711)*npz))+(((-43.5261707988981)*x726*x728))+(((-11.3636363636364)*x728*x729)));
j11eval[1]=IKsign(((((-0.316)*x727))+(((0.00726)*x729))+(((0.0825)*x725))+(((-0.00726)*cj10))+(((-0.0825)*x728*x729))+((x729*x732))+(((-1.0)*cj10*x732))+(((-0.384)*npz))+(((-0.316)*x726*x728))+(((0.316)*x726*x731))+x733+(((0.027808)*x726))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x734=cj12*cj12;
IkReal x735=npy*npy;
IkReal x736=npx*npx;
IkReal x737=npz*npz;
IkReal x738=(npy*sj12);
IkReal x739=(cj12*npx);
IkReal x740=((129.132231404959)*x734);
j11eval[0]=((1.0)+(((22.7272727272727)*x738))+(((-258.264462809917)*x738*x739))+(((129.132231404959)*x737))+(((129.132231404959)*x735))+(((-22.7272727272727)*x739))+(((-1.0)*x735*x740))+((x736*x740)));
j11eval[1]=IKsign(((0.007744)+(((-2.0)*x738*x739))+(((-1.0)*x734*x735))+((x734*x736))+(((0.176)*x738))+(((-0.176)*x739))+x737+x735));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x741=cj12*cj12;
IkReal x742=npy*npy;
IkReal x743=((0.0825)*sj9);
IkReal x744=(npy*sj12);
IkReal x745=((0.316)*cj9);
IkReal x746=(cj12*npx);
IkReal x747=(cj10*cj9);
IkReal x748=((0.0825)*cj10);
IkReal x749=((0.316)*cj10*sj9);
IkReal x750=(x746*x748);
CheckValue<IkReal> x751=IKPowWithIntegerCheck(IKsign(((0.007744)+((x741*(npx*npx)))+(((0.176)*x744))+(((-0.176)*x746))+x742+(((-2.0)*x744*x746))+(npz*npz)+(((-1.0)*x741*x742)))),-1);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752 = IKatan2WithCheck(IkReal(((-0.033792)+((x745*x746))+(((0.384)*x746))+(((-1.0)*x744*x745))+(((-0.027808)*cj9))+(((0.00726)*sj9))+(((-0.384)*x744))+((x743*x744))+(((0.0825)*npz*x747))+((npz*x749))+(((-1.0)*x743*x746))+(((-1.0)*npz*x748)))),IkReal(((((-0.027808)*cj10*sj9))+(((0.0825)*x746*x747))+((x744*x748))+((x746*x749))+(((-1.0)*x744*x749))+(((0.00726)*cj10))+(((-0.384)*npz))+(((-0.00726)*x747))+((npz*x743))+(((-1.0)*x750))+(((-1.0)*npz*x745))+(((-0.0825)*x744*x747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x752.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x751.value)))+(x752.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x753=IKsin(j11);
IkReal x754=IKcos(j11);
IkReal x755=((0.0825)*sj9);
IkReal x756=(npy*sj12);
IkReal x757=((0.316)*cj9);
IkReal x758=((0.0825)*cj10);
IkReal x759=((1.0)*npz);
IkReal x760=((0.316)*sj9);
IkReal x761=((1.0)*cj12*npx);
IkReal x762=(cj10*x754);
IkReal x763=(cj9*x753);
evalcond[0]=((0.384)+((npz*x754))+(((0.088)*x753))+(((-1.0)*x753*x761))+x757+((x753*x756))+(((-1.0)*x755)));
evalcond[1]=(((cj9*x758))+(((0.088)*x754))+(((-1.0)*x753*x759))+(((-1.0)*x754*x761))+((cj10*x760))+(((-1.0)*x758))+((x754*x756)));
evalcond[2]=(((cj10*x753*x760))+(((-1.0)*x754*x757))+(((-1.0)*x753*x758))+(((-0.384)*x754))+((x758*x763))+(((-1.0)*x759))+((x754*x755)));
evalcond[3]=((0.088)+(((0.384)*x753))+((cj9*x754*x758))+(((-1.0)*x754*x758))+((x760*x762))+(((-1.0)*x761))+(((-1.0)*x753*x755))+x756+((x753*x757)));
evalcond[4]=((-0.2686685)+(((-0.055616)*sj9*x762))+(((0.01452)*x762))+(((0.1155)*sj9))+(((0.01452)*sj9*x753))+(((-0.2290755)*cj9))+(((-0.055616)*x763))+pp+(((-0.01452)*cj9*x762))+(((-0.067584)*x753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x764=cj10*cj10;
IkReal x765=cj9*cj9;
IkReal x766=(cj10*sj9);
IkReal x767=(npy*sj12);
IkReal x768=(cj12*npx);
IkReal x769=(cj10*cj9);
IkReal x770=((0.05214)*sj9*x764);
IkReal x771=((0.0825)*cj10*x768);
CheckValue<IkReal> x772=IKPowWithIntegerCheck(IKsign(((((-0.316)*cj9*npz))+(((0.0825)*npz*sj9))+(((-0.00726)*cj10))+(((-0.316)*x766*x768))+(((0.0825)*x767*x769))+(((-0.384)*npz))+(((-0.0825)*cj10*x767))+(((-0.0825)*x768*x769))+x771+(((0.00726)*x769))+(((0.027808)*x766))+(((0.316)*x766*x767)))),-1);
if(!x772.valid){
continue;
}
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(((((-0.05214)*cj10*x765))+((npz*x767))+(((0.088)*npz))+(((-0.00561)*x769))+(((-1.0)*npz*x768))+(((0.05775)*cj10))+(((-0.09304975)*cj9*x766))+(((-0.12815025)*x766)))),IkReal(((((0.0136125)*cj9*x764))+(((-0.10666225)*x764))+x770+(npz*npz)+(((-1.0)*cj9*x770))+(((0.09304975)*x764*x765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x772.value)))+(x773.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x774=IKsin(j11);
IkReal x775=IKcos(j11);
IkReal x776=((0.0825)*sj9);
IkReal x777=(npy*sj12);
IkReal x778=((0.316)*cj9);
IkReal x779=((0.0825)*cj10);
IkReal x780=((1.0)*npz);
IkReal x781=((0.316)*sj9);
IkReal x782=((1.0)*cj12*npx);
IkReal x783=(cj10*x775);
IkReal x784=(cj9*x774);
evalcond[0]=((0.384)+((x774*x777))+(((0.088)*x774))+x778+(((-1.0)*x776))+(((-1.0)*x774*x782))+((npz*x775)));
evalcond[1]=(((cj9*x779))+(((-1.0)*x775*x782))+(((0.088)*x775))+(((-1.0)*x779))+(((-1.0)*x774*x780))+((cj10*x781))+((x775*x777)));
evalcond[2]=((((-1.0)*x774*x779))+(((-1.0)*x780))+((x779*x784))+(((-0.384)*x775))+(((-1.0)*x775*x778))+((x775*x776))+((cj10*x774*x781)));
evalcond[3]=((0.088)+((x774*x778))+((x781*x783))+(((-1.0)*x774*x776))+(((-1.0)*x782))+(((0.384)*x774))+((cj9*x775*x779))+(((-1.0)*x775*x779))+x777);
evalcond[4]=((-0.2686685)+(((0.01452)*x783))+(((0.1155)*sj9))+(((-0.2290755)*cj9))+(((0.01452)*sj9*x774))+(((-0.01452)*cj9*x783))+pp+(((-0.055616)*x784))+(((-0.067584)*x774))+(((-0.055616)*sj9*x783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x785=cj9*cj9;
IkReal x786=(cj10*sj9);
IkReal x787=(npy*sj12);
IkReal x788=((0.316)*cj9);
IkReal x789=(cj12*npx);
IkReal x790=((0.0825)*sj9);
IkReal x791=((0.0825)*cj10*npz);
CheckValue<IkReal> x792=IKPowWithIntegerCheck(IKsign(((-0.033792)+(((-0.384)*x787))+(((0.384)*x789))+((x788*x789))+((x787*x790))+(((-0.027808)*cj9))+(((0.00726)*sj9))+(((-1.0)*x787*x788))+(((-1.0)*cj9*x791))+(((-1.0)*x789*x790))+(((-0.316)*npz*x786))+x791)),-1);
if(!x792.valid){
continue;
}
CheckValue<IkReal> x793 = IKatan2WithCheck(IkReal(((0.15426225)+(((0.09304975)*x785))+(((-0.06336)*sj9))+(((-1.0)*(npz*npz)))+(((-0.05214)*cj9*sj9))+(((0.242688)*cj9)))),IkReal(((((0.088)*npz))+(((0.05214)*cj10*x785))+(((0.12815025)*x786))+(((0.09304975)*cj9*x786))+(((0.00561)*cj10*cj9))+(((-1.0)*npz*x789))+(((-0.05775)*cj10))+((npz*x787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x793.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x792.value)))+(x793.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x794=IKsin(j11);
IkReal x795=IKcos(j11);
IkReal x796=((0.0825)*sj9);
IkReal x797=(npy*sj12);
IkReal x798=((0.316)*cj9);
IkReal x799=((0.0825)*cj10);
IkReal x800=((1.0)*npz);
IkReal x801=((0.316)*sj9);
IkReal x802=((1.0)*cj12*npx);
IkReal x803=(cj10*x795);
IkReal x804=(cj9*x794);
evalcond[0]=((0.384)+(((-1.0)*x796))+(((0.088)*x794))+x798+((x794*x797))+(((-1.0)*x794*x802))+((npz*x795)));
evalcond[1]=(((cj10*x801))+(((-1.0)*x799))+((cj9*x799))+(((0.088)*x795))+(((-1.0)*x795*x802))+(((-1.0)*x794*x800))+((x795*x797)));
evalcond[2]=((((-1.0)*x794*x799))+(((-0.384)*x795))+(((-1.0)*x795*x798))+((cj10*x794*x801))+((x799*x804))+(((-1.0)*x800))+((x795*x796)));
evalcond[3]=((0.088)+(((-1.0)*x794*x796))+(((0.384)*x794))+(((-1.0)*x795*x799))+((x801*x803))+((cj9*x795*x799))+x797+((x794*x798))+(((-1.0)*x802)));
evalcond[4]=((-0.2686685)+(((0.1155)*sj9))+(((-0.2290755)*cj9))+(((-0.067584)*x794))+(((-0.055616)*x804))+pp+(((0.01452)*x803))+(((-0.055616)*sj9*x803))+(((-0.01452)*cj9*x803))+(((0.01452)*sj9*x794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
IkReal x805=((0.088)+(((-1.0)*cj12*npx))+((npy*sj12)));
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(npz),IkReal(x805),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
IkReal x806=((1.0)*(x808.value));
if((((npz*npz)+(x805*x805))) < -0.00001)
continue;
CheckValue<IkReal> x809=IKPowWithIntegerCheck(IKabs(IKsqrt(((npz*npz)+(x805*x805)))),-1);
if(!x809.valid){
continue;
}
if( (((x809.value)*(((0.384)+(((-0.0825)*sj9))+(((0.316)*cj9)))))) < -1-IKFAST_SINCOS_THRESH || (((x809.value)*(((0.384)+(((-0.0825)*sj9))+(((0.316)*cj9)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x807=IKasin(((x809.value)*(((0.384)+(((-0.0825)*sj9))+(((0.316)*cj9))))));
j11array[0]=((((-1.0)*x807))+(((-1.0)*x806)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+x807+(((-1.0)*x806)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
IkReal j10eval[3];
j10eval[0]=((-1.0)+cj9+(((3.83030303030303)*sj9)));
j10eval[1]=IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9))));
j10eval[2]=((IKabs(((((-1.0)*cj11*npy*sj12))+(((-0.088)*cj11))+((cj11*cj12*npx))+((npz*sj11)))))+(IKabs((((cj12*npy))+((npx*sj12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x810=((3.83030303030303)*sj9);
j10eval[0]=((-1.0)+cj9+x810);
j10eval[1]=(((sj11*x810))+((cj9*sj11))+(((-1.0)*sj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x811=((3.83030303030303)*sj9);
j10eval[0]=((-1.0)+cj9+x811);
j10eval[1]=(((cj11*x811))+((cj11*cj9))+(((-1.0)*cj11)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.63084142381503)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x812=((2597402597.4026)*npx);
IkReal x813=((2597402597.4026)*npy);
if( IKabs(((((-1.0)*cj12*x813))+(((-1.0)*sj12*x812)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*sj12*x813))+(((-1.0)*cj11*cj12*x812))+(((228571428.571429)*cj11))+(((-2597402597.4026)*npz*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*x813))+(((-1.0)*sj12*x812))))+IKsqr((((cj11*sj12*x813))+(((-1.0)*cj11*cj12*x812))+(((228571428.571429)*cj11))+(((-2597402597.4026)*npz*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj12*x813))+(((-1.0)*sj12*x812))), (((cj11*sj12*x813))+(((-1.0)*cj11*cj12*x812))+(((228571428.571429)*cj11))+(((-2597402597.4026)*npz*sj11))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x814=IKcos(j10);
IkReal x815=((1.0)*npz);
IkReal x816=(npy*sj12);
IkReal x817=((1.0)*cj12);
IkReal x818=((3.85e-10)*x814);
evalcond[0]=((-0.012367999656485)+(((-0.01196799990672)*sj11))+pp+(((6.776e-11)*cj11*x814)));
evalcond[1]=((((-1.0)*x815))+(((-0.06799999947)*cj11))+(((-1.0)*sj11*x818)));
evalcond[2]=((((-3.85e-10)*(IKsin(j10))))+(((-1.0)*npy*x817))+(((-1.0)*npx*sj12)));
evalcond[3]=((0.088)+(((-1.0)*cj11*x818))+(((-1.0)*npx*x817))+(((0.06799999947)*sj11))+x816);
evalcond[4]=(((cj11*x816))+(((-1.0)*x818))+(((0.088)*cj11))+(((-1.0)*sj11*x815))+(((-1.0)*cj11*npx*x817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j10eval[0]=((-1.0)+cj9+(((3.83030303030303)*sj9)));
j10eval[1]=((IKabs(npz))+(IKabs((((cj12*npy))+((npx*sj12))))));
j10eval[2]=IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.63084142381503)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2597402597.4026)*npz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12))))+IKsqr(((-2597402597.4026)*npz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12))), ((-2597402597.4026)*npz));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*npz))+(((-3.85e-10)*(IKcos(j10)))));
evalcond[1]=((((-1.0)*cj12*npy))+(((-3.85e-10)*(IKsin(j10))))+(((-1.0)*npx*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x819 = IKatan2WithCheck(IkReal((((cj12*npy))+((npx*sj12)))),IkReal(npz),IKFAST_ATAN2_MAGTHRESH);
if(!x819.valid){
continue;
}
CheckValue<IkReal> x820=IKPowWithIntegerCheck(IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9)))),-1);
if(!x820.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x819.value)+(((1.5707963267949)*(x820.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x821=IKcos(j10);
IkReal x822=IKsin(j10);
IkReal x823=((0.316)*sj9);
IkReal x824=((0.0825)*x821);
IkReal x825=((0.0825)*x822);
evalcond[0]=(((x821*x823))+(((-1.0)*x824))+(((-1.0)*npz))+((cj9*x824)));
evalcond[1]=((((-1.0)*cj12*npy))+(((-1.0)*x825))+((x822*x823))+((cj9*x825))+(((-1.0)*npx*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j10eval[0]=((-1.0)+cj9+(((3.83030303030303)*sj9)));
j10eval[1]=IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9))));
j10eval[2]=((IKabs(npz))+(IKabs((((cj12*npy))+((npx*sj12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.63084142381503)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2597402597.4026)*npz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12))))+IKsqr(((2597402597.4026)*npz))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12))), ((2597402597.4026)*npz));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=(npz+(((-3.85e-10)*(IKcos(j10)))));
evalcond[1]=((((-1.0)*cj12*npy))+(((-3.85e-10)*(IKsin(j10))))+(((-1.0)*npx*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x826=IKPowWithIntegerCheck(IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9)))),-1);
if(!x826.valid){
continue;
}
CheckValue<IkReal> x827 = IKatan2WithCheck(IkReal((((cj12*npy))+((npx*sj12)))),IkReal(((-1.0)*npz)),IKFAST_ATAN2_MAGTHRESH);
if(!x827.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x826.value)))+(x827.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x828=IKcos(j10);
IkReal x829=IKsin(j10);
IkReal x830=((0.316)*sj9);
IkReal x831=((0.0825)*x828);
IkReal x832=((0.0825)*x829);
evalcond[0]=(((cj9*x831))+npz+(((-1.0)*x831))+((x828*x830)));
evalcond[1]=(((cj9*x832))+(((-1.0)*cj12*npy))+((x829*x830))+(((-1.0)*x832))+(((-1.0)*npx*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj11=0;
cj11=1.0;
j11=0;
j10eval[0]=((-1.0)+cj9+(((3.83030303030303)*sj9)));
j10eval[1]=IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9))));
j10eval[2]=((IKabs(((-0.088)+((cj12*npx))+(((-1.0)*npy*sj12)))))+(IKabs((((cj12*npy))+((npx*sj12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=0;
cj11=1.0;
j11=0;
j10eval[0]=((-1.0)+cj9+(((3.83030303030303)*sj9)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.63084142381503)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((182526559.275162)+(((-14757969303.4238)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12))))+IKsqr(((182526559.275162)+(((-14757969303.4238)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12))), ((182526559.275162)+(((-14757969303.4238)*pp))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x833=IKcos(j10);
evalcond[0]=((-0.012367999656485)+pp+(((6.776e-11)*x833)));
evalcond[1]=((0.0702727253209375)+(((-3.85e-10)*x833))+(((-5.68181818181818)*pp)));
evalcond[2]=((((-1.0)*cj12*npy))+(((-3.85e-10)*(IKsin(j10))))+(((-1.0)*npx*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x834=IKPowWithIntegerCheck(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9))),-1);
if(!x834.valid){
continue;
}
CheckValue<IkReal> x835=IKPowWithIntegerCheck(((0.01452)+(((-0.055616)*sj9))+(((-0.01452)*cj9))),-1);
if(!x835.valid){
continue;
}
if( IKabs(((x834.value)*((((cj12*npy))+((npx*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x835.value)*(((0.2686685)+(((0.2290755)*cj9))+(((-1.0)*pp))+(((-0.1155)*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x834.value)*((((cj12*npy))+((npx*sj12))))))+IKsqr(((x835.value)*(((0.2686685)+(((0.2290755)*cj9))+(((-1.0)*pp))+(((-0.1155)*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x834.value)*((((cj12*npy))+((npx*sj12))))), ((x835.value)*(((0.2686685)+(((0.2290755)*cj9))+(((-1.0)*pp))+(((-0.1155)*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x836=IKsin(j10);
IkReal x837=IKcos(j10);
IkReal x838=((1.0)*cj12);
IkReal x839=((0.0825)*x837);
IkReal x840=(sj9*x837);
IkReal x841=((0.01452)*x837);
IkReal x842=((0.0825)*x836);
evalcond[0]=(((cj9*x842))+(((-1.0)*npy*x838))+(((0.316)*sj9*x836))+(((-1.0)*x842))+(((-1.0)*npx*sj12)));
evalcond[1]=((0.088)+((cj9*x839))+(((-1.0)*npx*x838))+(((0.316)*x840))+(((-1.0)*x839))+((npy*sj12)));
evalcond[2]=((-0.2686685)+(((0.1155)*sj9))+(((-0.2290755)*cj9))+pp+(((-0.055616)*x840))+x841+(((-1.0)*cj9*x841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x843 = IKatan2WithCheck(IkReal((((cj12*npy))+((npx*sj12)))),IkReal(((-0.088)+((cj12*npx))+(((-1.0)*npy*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x843.valid){
continue;
}
CheckValue<IkReal> x844=IKPowWithIntegerCheck(IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9)))),-1);
if(!x844.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x843.value)+(((1.5707963267949)*(x844.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x845=IKsin(j10);
IkReal x846=IKcos(j10);
IkReal x847=((1.0)*cj12);
IkReal x848=((0.0825)*x846);
IkReal x849=(sj9*x846);
IkReal x850=((0.01452)*x846);
IkReal x851=((0.0825)*x845);
evalcond[0]=((((-1.0)*npy*x847))+(((-1.0)*x851))+(((0.316)*sj9*x845))+((cj9*x851))+(((-1.0)*npx*sj12)));
evalcond[1]=((0.088)+((cj9*x848))+(((0.316)*x849))+(((-1.0)*npx*x847))+(((-1.0)*x848))+((npy*sj12)));
evalcond[2]=((-0.2686685)+(((0.1155)*sj9))+(((-0.2290755)*cj9))+(((-1.0)*cj9*x850))+pp+(((-0.055616)*x849))+x850);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j10eval[0]=((-1.0)+cj9+(((3.83030303030303)*sj9)));
j10eval[1]=IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9))));
j10eval[2]=((IKabs(((0.088)+(((-1.0)*cj12*npx))+((npy*sj12)))))+(IKabs((((cj12*npy))+((npx*sj12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j10eval[0]=((-1.0)+cj9+(((3.83030303030303)*sj9)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.63084142381503)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-182526559.275162)+(((14757969303.4238)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12))))+IKsqr(((-182526559.275162)+(((14757969303.4238)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-2597402597.4026)*cj12*npy))+(((-2597402597.4026)*npx*sj12))), ((-182526559.275162)+(((14757969303.4238)*pp))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x852=IKcos(j10);
evalcond[0]=((-0.012367999656485)+(((-6.776e-11)*x852))+pp);
evalcond[1]=((-0.0702727253209375)+(((-3.85e-10)*x852))+(((5.68181818181818)*pp)));
evalcond[2]=((((-1.0)*cj12*npy))+(((-3.85e-10)*(IKsin(j10))))+(((-1.0)*npx*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x853=IKPowWithIntegerCheck(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9))),-1);
if(!x853.valid){
continue;
}
CheckValue<IkReal> x854=IKPowWithIntegerCheck(((-0.01452)+(((0.01452)*cj9))+(((0.055616)*sj9))),-1);
if(!x854.valid){
continue;
}
if( IKabs(((x853.value)*((((cj12*npy))+((npx*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x854.value)*(((0.2686685)+(((0.2290755)*cj9))+(((-1.0)*pp))+(((-0.1155)*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x853.value)*((((cj12*npy))+((npx*sj12))))))+IKsqr(((x854.value)*(((0.2686685)+(((0.2290755)*cj9))+(((-1.0)*pp))+(((-0.1155)*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x853.value)*((((cj12*npy))+((npx*sj12))))), ((x854.value)*(((0.2686685)+(((0.2290755)*cj9))+(((-1.0)*pp))+(((-0.1155)*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x855=IKsin(j10);
IkReal x856=IKcos(j10);
IkReal x857=((1.0)*npy);
IkReal x858=((0.0825)*x856);
IkReal x859=(sj9*x856);
IkReal x860=((0.01452)*x856);
IkReal x861=((0.0825)*x855);
evalcond[0]=((((-1.0)*x861))+((cj9*x861))+(((0.316)*sj9*x855))+(((-1.0)*cj12*x857))+(((-1.0)*npx*sj12)));
evalcond[1]=((-0.088)+(((-1.0)*sj12*x857))+(((-1.0)*x858))+((cj9*x858))+((cj12*npx))+(((0.316)*x859)));
evalcond[2]=((-0.2686685)+(((-1.0)*x860))+(((0.055616)*x859))+(((0.1155)*sj9))+(((-0.2290755)*cj9))+pp+((cj9*x860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x862=IKPowWithIntegerCheck(IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9)))),-1);
if(!x862.valid){
continue;
}
CheckValue<IkReal> x863 = IKatan2WithCheck(IkReal((((cj12*npy))+((npx*sj12)))),IkReal(((0.088)+(((-1.0)*cj12*npx))+((npy*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x863.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x862.value)))+(x863.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[3];
IkReal x864=IKsin(j10);
IkReal x865=IKcos(j10);
IkReal x866=((1.0)*npy);
IkReal x867=((0.0825)*x865);
IkReal x868=(sj9*x865);
IkReal x869=((0.01452)*x865);
IkReal x870=((0.0825)*x864);
evalcond[0]=((((-1.0)*cj12*x866))+((cj9*x870))+(((0.316)*sj9*x864))+(((-1.0)*npx*sj12))+(((-1.0)*x870)));
evalcond[1]=((-0.088)+(((-1.0)*x867))+(((-1.0)*sj12*x866))+((cj12*npx))+((cj9*x867))+(((0.316)*x868)));
evalcond[2]=((-0.2686685)+(((-1.0)*x869))+(((0.055616)*x868))+(((0.1155)*sj9))+(((-0.2290755)*cj9))+pp+((cj9*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x871=((0.0825)*cj9);
IkReal x872=((0.316)*sj9);
CheckValue<IkReal> x873=IKPowWithIntegerCheck(((-0.0825)+x871+x872),-1);
if(!x873.valid){
continue;
}
CheckValue<IkReal> x874=IKPowWithIntegerCheck(((((-0.0825)*cj11))+((cj11*x871))+((cj11*x872))),-1);
if(!x874.valid){
continue;
}
if( IKabs(((x873.value)*((((cj12*npy))+((npx*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x874.value)*(((-0.088)+(((-0.316)*cj9*sj11))+(((-0.384)*sj11))+(((0.0825)*sj11*sj9))+((cj12*npx))+(((-1.0)*npy*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x873.value)*((((cj12*npy))+((npx*sj12))))))+IKsqr(((x874.value)*(((-0.088)+(((-0.316)*cj9*sj11))+(((-0.384)*sj11))+(((0.0825)*sj11*sj9))+((cj12*npx))+(((-1.0)*npy*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x873.value)*((((cj12*npy))+((npx*sj12))))), ((x874.value)*(((-0.088)+(((-0.316)*cj9*sj11))+(((-0.384)*sj11))+(((0.0825)*sj11*sj9))+((cj12*npx))+(((-1.0)*npy*sj12))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x875=IKsin(j10);
IkReal x876=IKcos(j10);
IkReal x877=((1.0)*cj12);
IkReal x878=(npy*sj12);
IkReal x879=(sj11*sj9);
IkReal x880=((0.316)*sj9);
IkReal x881=((0.316)*cj9);
IkReal x882=(cj9*sj11);
IkReal x883=((1.0)*npz);
IkReal x884=(cj11*x876);
IkReal x885=((0.0825)*x875);
IkReal x886=((0.0825)*x876);
evalcond[0]=((((-1.0)*x885))+(((-1.0)*npy*x877))+((x875*x880))+((cj9*x885))+(((-1.0)*npx*sj12)));
evalcond[1]=(((x876*x880))+(((-1.0)*x886))+((cj11*x878))+(((0.088)*cj11))+(((-1.0)*sj11*x883))+((cj9*x886))+(((-1.0)*cj11*npx*x877)));
evalcond[2]=((((-1.0)*cj11*x881))+(((-0.384)*cj11))+((x882*x886))+(((0.0825)*cj11*sj9))+(((-1.0)*x883))+(((0.316)*x876*x879))+(((-1.0)*sj11*x886)));
evalcond[3]=((0.088)+((x880*x884))+((sj11*x881))+(((-0.0825)*x884))+(((0.0825)*cj9*x884))+(((0.384)*sj11))+(((-1.0)*npx*x877))+x878+(((-0.0825)*x879)));
evalcond[4]=((-0.2686685)+(((-0.067584)*sj11))+(((-0.055616)*sj9*x884))+(((0.1155)*sj9))+(((-0.2290755)*cj9))+(((-0.01452)*cj9*x884))+(((0.01452)*x879))+pp+(((0.01452)*x884))+(((-0.055616)*x882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x887=((0.0825)*sj11);
IkReal x888=((0.316)*sj9);
CheckValue<IkReal> x889=IKPowWithIntegerCheck(((-0.0825)+(((0.0825)*cj9))+x888),-1);
if(!x889.valid){
continue;
}
CheckValue<IkReal> x890=IKPowWithIntegerCheck((((sj11*x888))+(((-1.0)*x887))+((cj9*x887))),-1);
if(!x890.valid){
continue;
}
if( IKabs(((x889.value)*((((cj12*npy))+((npx*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x890.value)*((npz+(((0.316)*cj11*cj9))+(((0.384)*cj11))+(((-0.0825)*cj11*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x889.value)*((((cj12*npy))+((npx*sj12))))))+IKsqr(((x890.value)*((npz+(((0.316)*cj11*cj9))+(((0.384)*cj11))+(((-0.0825)*cj11*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x889.value)*((((cj12*npy))+((npx*sj12))))), ((x890.value)*((npz+(((0.316)*cj11*cj9))+(((0.384)*cj11))+(((-0.0825)*cj11*sj9))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x891=IKsin(j10);
IkReal x892=IKcos(j10);
IkReal x893=((1.0)*cj12);
IkReal x894=(npy*sj12);
IkReal x895=(sj11*sj9);
IkReal x896=((0.316)*sj9);
IkReal x897=((0.316)*cj9);
IkReal x898=(cj9*sj11);
IkReal x899=((1.0)*npz);
IkReal x900=(cj11*x892);
IkReal x901=((0.0825)*x891);
IkReal x902=((0.0825)*x892);
evalcond[0]=(((cj9*x901))+(((-1.0)*npy*x893))+(((-1.0)*x901))+((x891*x896))+(((-1.0)*npx*sj12)));
evalcond[1]=(((cj9*x902))+(((-1.0)*x902))+((cj11*x894))+(((0.088)*cj11))+(((-1.0)*sj11*x899))+((x892*x896))+(((-1.0)*cj11*npx*x893)));
evalcond[2]=((((-1.0)*cj11*x897))+(((-0.384)*cj11))+(((0.316)*x892*x895))+(((-1.0)*x899))+(((0.0825)*cj11*sj9))+(((-1.0)*sj11*x902))+((x898*x902)));
evalcond[3]=((0.088)+((sj11*x897))+(((-1.0)*npx*x893))+(((-0.0825)*x895))+(((0.0825)*cj9*x900))+(((0.384)*sj11))+((x896*x900))+x894+(((-0.0825)*x900)));
evalcond[4]=((-0.2686685)+(((-0.055616)*x898))+(((0.01452)*x895))+(((-0.067584)*sj11))+(((0.1155)*sj9))+(((-0.2290755)*cj9))+(((-0.055616)*sj9*x900))+(((-0.01452)*cj9*x900))+(((0.01452)*x900))+pp);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x903=IKPowWithIntegerCheck(IKsign(((-0.0825)+(((0.0825)*cj9))+(((0.316)*sj9)))),-1);
if(!x903.valid){
continue;
}
CheckValue<IkReal> x904 = IKatan2WithCheck(IkReal((((cj12*npy))+((npx*sj12)))),IkReal(((((-1.0)*cj11*npy*sj12))+(((-0.088)*cj11))+((cj11*cj12*npx))+((npz*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x904.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x903.value)))+(x904.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[5];
IkReal x905=IKsin(j10);
IkReal x906=IKcos(j10);
IkReal x907=((1.0)*cj12);
IkReal x908=(npy*sj12);
IkReal x909=(sj11*sj9);
IkReal x910=((0.316)*sj9);
IkReal x911=((0.316)*cj9);
IkReal x912=(cj9*sj11);
IkReal x913=((1.0)*npz);
IkReal x914=(cj11*x906);
IkReal x915=((0.0825)*x905);
IkReal x916=((0.0825)*x906);
evalcond[0]=((((-1.0)*x915))+(((-1.0)*npy*x907))+((x905*x910))+((cj9*x915))+(((-1.0)*npx*sj12)));
evalcond[1]=((((-1.0)*x916))+(((-1.0)*cj11*npx*x907))+(((-1.0)*sj11*x913))+(((0.088)*cj11))+((x906*x910))+((cj11*x908))+((cj9*x916)));
evalcond[2]=((((-0.384)*cj11))+(((0.316)*x906*x909))+(((-1.0)*x913))+(((-1.0)*cj11*x911))+(((0.0825)*cj11*sj9))+(((-1.0)*sj11*x916))+((x912*x916)));
evalcond[3]=((0.088)+((x910*x914))+((sj11*x911))+(((0.0825)*cj9*x914))+(((0.384)*sj11))+(((-1.0)*npx*x907))+x908+(((-0.0825)*x909))+(((-0.0825)*x914)));
evalcond[4]=((-0.2686685)+(((-0.067584)*sj11))+(((0.1155)*sj9))+(((-0.2290755)*cj9))+(((0.01452)*x914))+(((0.01452)*x909))+(((-0.055616)*sj9*x914))+(((-0.01452)*cj9*x914))+pp+(((-0.055616)*x912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x120=((1.0)*sj9);
IkReal x121=((1.0)*sj12);
IkReal x122=((1.0)*cj12);
IkReal x123=((1.0)*sj10);
IkReal x124=(cj11*r12);
IkReal x125=((-1.0)*sj10);
IkReal x126=(((cj12*r00))+(((-1.0)*r01*x121)));
IkReal x127=((((-1.0)*r11*x121))+((cj12*r10)));
IkReal x128=(((cj12*r20))+(((-1.0)*r21*x121)));
IkReal x129=(sj11*x127);
IkReal x130=((((-1.0)*r00*x121))+(((-1.0)*r01*x122)));
IkReal x131=((((-1.0)*r10*x121))+(((-1.0)*r11*x122)));
IkReal x132=((((-1.0)*r20*x121))+(((-1.0)*r21*x122)));
IkReal x133=(((r02*sj11))+((cj11*x126)));
IkReal x134=(((cj11*x127))+((r12*sj11)));
IkReal x135=(((cj11*x128))+((r22*sj11)));
IkReal x136=((((-1.0)*cj11*r22))+((sj11*x128)));
IkReal x137=((((-1.0)*cj11*r02))+((sj11*x126)));
IkReal x138=(cj10*x134);
IkReal x139=((((-1.0)*x123*x130))+((cj10*x133)));
IkReal x140=(((cj10*x135))+((x125*x132)));
new_r00=(((cj9*x139))+(((-1.0)*x120*x137)));
new_r01=(((cj10*x130))+((sj10*x133)));
new_r02=(((cj9*x137))+((sj9*x139)));
new_r10=(((cj9*((x138+((x125*x131))))))+(((-1.0)*x120*((x129+(((-1.0)*x124)))))));
new_r11=(((cj10*x131))+((sj10*x134)));
new_r12=(((sj9*(((((-1.0)*x123*x131))+x138))))+((cj9*((x129+(((-1.0)*x124)))))));
new_r20=((((-1.0)*x120*x136))+((cj9*x140)));
new_r21=(((cj10*x132))+((sj10*x135)));
new_r22=(((cj9*x136))+((sj9*x140)));
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
cj7array[0]=new_r22;
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

{
IkReal j6eval[3];
j6eval[0]=sj7;
j6eval[1]=IKsign(sj7);
j6eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=new_r12;
j6eval[1]=sj7;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j8mul = 1;
j8=0;
j6mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].fmul = j6mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].fmul = j8mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j8mul = 1;
j8=0;
j6mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].fmul = j6mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].fmul = j8mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x141=new_r22*new_r22;
IkReal x142=((16.0)*new_r10);
IkReal x143=((16.0)*new_r01);
IkReal x144=((16.0)*new_r22);
IkReal x145=((8.0)*new_r11);
IkReal x146=((8.0)*new_r00);
IkReal x147=(x141*x142);
IkReal x148=(x141*x143);
j6eval[0]=((IKabs(((((-1.0)*x142))+x147)))+(IKabs(((((-1.0)*new_r22*x146))+((x141*x145)))))+(IKabs((((new_r11*x144))+(((16.0)*new_r00))+(((-32.0)*new_r00*x141)))))+(IKabs(((((-1.0)*x148))+x143)))+(IKabs(((((32.0)*new_r11))+(((-16.0)*new_r11*x141))+(((-1.0)*new_r00*x144)))))+(IKabs(((((-1.0)*x146))+((new_r22*x145)))))+(IKabs(((((-1.0)*x143))+x148)))+(IKabs(((((-1.0)*x147))+x142))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6, j8]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j6evalpoly[1];
IkReal x149=new_r22*new_r22;
IkReal x150=((16.0)*new_r10);
IkReal x151=(new_r11*new_r22);
IkReal x152=(x149*x150);
IkReal x153=((((8.0)*x151))+(((-8.0)*new_r00)));
op[0]=x153;
op[1]=((((-1.0)*x152))+x150);
op[2]=((((16.0)*new_r00))+(((-32.0)*new_r00*x149))+(((16.0)*x151)));
op[3]=((((-1.0)*x150))+x152);
op[4]=x153;
polyroots4(op,zeror,numroots);
IkReal j6array[4], cj6array[4], sj6array[4], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[4]={true,true,true,true};
_nj6 = 4;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

IkReal x154=new_r22*new_r22;
IkReal x155=((16.0)*new_r01);
IkReal x156=(new_r00*new_r22);
IkReal x157=((8.0)*x156);
IkReal x158=(new_r11*x154);
IkReal x159=(x154*x155);
IkReal x160=((8.0)*x158);
j6evalpoly[0]=((((-1.0)*x157))+(((htj6*htj6*htj6*htj6)*(((((-1.0)*x157))+x160))))+((htj6*(((((-1.0)*x159))+x155))))+(((htj6*htj6)*(((((32.0)*new_r11))+(((-16.0)*x156))+(((-16.0)*x158))))))+x160+(((htj6*htj6*htj6)*(((((-1.0)*x155))+x159)))));
if( IKabs(j6evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j8eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x161=cj6*cj6;
IkReal x162=(cj6*new_r22);
IkReal x163=((-1.0)+x161+(((-1.0)*x161*(new_r22*new_r22))));
j8eval[0]=x163;
j8eval[1]=((IKabs((((new_r01*sj6))+(((-1.0)*new_r00*x162)))))+(IKabs((((new_r01*x162))+((new_r00*sj6))))));
j8eval[2]=IKsign(x163);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j8eval[0]=new_r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x164=new_r22*new_r22;
j8eval[0]=(((cj6*x164))+(((-1.0)*cj6)));
j8eval[1]=((((-1.0)*sj6))+((sj6*x164)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x165=IKsin(j8);
IkReal x166=IKcos(j8);
evalcond[0]=x165;
evalcond[1]=((-1.0)*x166);
evalcond[2]=((((-1.0)*x165))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x166))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r00, new_r01);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x167=IKsin(j8);
IkReal x168=IKcos(j8);
evalcond[0]=x167;
evalcond[1]=((-1.0)*x168);
evalcond[2]=((((-1.0)*x167))+new_r00);
evalcond[3]=((((-1.0)*x168))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r10, new_r11);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x169=IKsin(j8);
IkReal x170=IKcos(j8);
evalcond[0]=x169;
evalcond[1]=((-1.0)*x170);
evalcond[2]=((((-1.0)*x169))+new_r10);
evalcond[3]=((((-1.0)*x170))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x171=IKsin(j8);
IkReal x172=IKcos(j8);
evalcond[0]=x171;
evalcond[1]=((-1.0)*x172);
evalcond[2]=((((-1.0)*x171))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x172))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x173=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x173.valid){
continue;
}
if((x173.value) < -0.00001)
continue;
IkReal gconst1=((-1.0)*(IKsqrt(x173.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj6+(((-1.0)*gconst1)))))+(IKabs(((-1.0)+(IKsign(sj6)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
sj6=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
cj6=gconst1;
if( (gconst1) < -1-IKFAST_SINCOS_THRESH || (gconst1) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=IKacos(gconst1);
CheckValue<IkReal> x174=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x174.valid){
continue;
}
if((x174.value) < -0.00001)
continue;
IkReal gconst1=((-1.0)*(IKsqrt(x174.value)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
CheckValue<IkReal> x175=IKPowWithIntegerCheck(gconst1,-1);
if(!x175.valid){
continue;
}
if( IKabs((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x175.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))))+IKsqr((new_r11*(x175.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((gconst1*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))), (new_r11*(x175.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x176=IKcos(j8);
IkReal x177=IKsin(j8);
IkReal x178=((1.0)*x176);
IkReal x179=((1.0)*x177);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x180=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
IkReal x181=((1.0)*x180);
evalcond[0]=x177;
evalcond[1]=((-1.0)*x176);
evalcond[2]=((((-1.0)*gconst1*x178))+new_r11);
evalcond[3]=((((-1.0)*gconst1*x179))+new_r10);
evalcond[4]=(((x176*x180))+new_r01);
evalcond[5]=(((x177*x180))+new_r00);
evalcond[6]=((((-1.0)*x179))+((gconst1*new_r10))+(((-1.0)*new_r00*x181)));
evalcond[7]=((((-1.0)*x178))+((gconst1*new_r11))+(((-1.0)*new_r01*x181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x182=IKPowWithIntegerCheck(IKsign(gconst1),-1);
if(!x182.valid){
continue;
}
CheckValue<IkReal> x183 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x183.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x182.value)))+(x183.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x184=IKcos(j8);
IkReal x185=IKsin(j8);
IkReal x186=((1.0)*x184);
IkReal x187=((1.0)*x185);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x188=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
IkReal x189=((1.0)*x188);
evalcond[0]=x185;
evalcond[1]=((-1.0)*x184);
evalcond[2]=(new_r11+(((-1.0)*gconst1*x186)));
evalcond[3]=(new_r10+(((-1.0)*gconst1*x187)));
evalcond[4]=(((x184*x188))+new_r01);
evalcond[5]=(((x185*x188))+new_r00);
evalcond[6]=(((gconst1*new_r10))+(((-1.0)*x187))+(((-1.0)*new_r00*x189)));
evalcond[7]=(((gconst1*new_r11))+(((-1.0)*x186))+(((-1.0)*new_r01*x189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x190=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x190.valid){
continue;
}
if((x190.value) < -0.00001)
continue;
IkReal gconst1=((-1.0)*(IKsqrt(x190.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj6)))))+(IKabs((cj6+(((-1.0)*gconst1)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
sj6=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))));
cj6=gconst1;
if( (gconst1) < -1-IKFAST_SINCOS_THRESH || (gconst1) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=((-1.0)*(IKacos(gconst1)));
CheckValue<IkReal> x191=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x191.valid){
continue;
}
if((x191.value) < -0.00001)
continue;
IkReal gconst1=((-1.0)*(IKsqrt(x191.value)));
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
CheckValue<IkReal> x192=IKPowWithIntegerCheck(gconst1,-1);
if(!x192.valid){
continue;
}
if( IKabs((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x192.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))))+IKsqr((new_r11*(x192.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((gconst1*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1))))))))), (new_r11*(x192.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x193=IKcos(j8);
IkReal x194=IKsin(j8);
IkReal x195=((1.0)*x193);
IkReal x196=((1.0)*x194);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x197=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
evalcond[0]=x194;
evalcond[1]=((-1.0)*x193);
evalcond[2]=((((-1.0)*gconst1*x195))+new_r11);
evalcond[3]=((((-1.0)*gconst1*x196))+new_r10);
evalcond[4]=((((-1.0)*x195*x197))+new_r01);
evalcond[5]=((((-1.0)*x196*x197))+new_r00);
evalcond[6]=(((new_r00*x197))+((gconst1*new_r10))+(((-1.0)*x196)));
evalcond[7]=(((new_r01*x197))+((gconst1*new_r11))+(((-1.0)*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x198=IKPowWithIntegerCheck(IKsign(gconst1),-1);
if(!x198.valid){
continue;
}
CheckValue<IkReal> x199 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x199.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x198.value)))+(x199.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x200=IKcos(j8);
IkReal x201=IKsin(j8);
IkReal x202=((1.0)*x200);
IkReal x203=((1.0)*x201);
if((((1.0)+(((-1.0)*(gconst1*gconst1))))) < -0.00001)
continue;
IkReal x204=IKsqrt(((1.0)+(((-1.0)*(gconst1*gconst1)))));
evalcond[0]=x201;
evalcond[1]=((-1.0)*x200);
evalcond[2]=(new_r11+(((-1.0)*gconst1*x202)));
evalcond[3]=(new_r10+(((-1.0)*gconst1*x203)));
evalcond[4]=((((-1.0)*x202*x204))+new_r01);
evalcond[5]=((((-1.0)*x203*x204))+new_r00);
evalcond[6]=(((gconst1*new_r10))+((new_r00*x204))+(((-1.0)*x203)));
evalcond[7]=(((gconst1*new_r11))+((new_r01*x204))+(((-1.0)*x202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x205=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x205.valid){
continue;
}
if((x205.value) < -0.00001)
continue;
IkReal gconst2=IKsqrt(x205.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj6)))))+(IKabs((cj6+(((-1.0)*gconst2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
sj6=IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2)))));
cj6=gconst2;
if( (gconst2) < -1-IKFAST_SINCOS_THRESH || (gconst2) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=IKacos(gconst2);
CheckValue<IkReal> x206=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x206.valid){
continue;
}
if((x206.value) < -0.00001)
continue;
IkReal gconst2=IKsqrt(x206.value);
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
CheckValue<IkReal> x207=IKPowWithIntegerCheck(gconst2,-1);
if(!x207.valid){
continue;
}
if( IKabs((((gconst2*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x207.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst2*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2))))))))))+IKsqr((new_r11*(x207.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((gconst2*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2))))))))), (new_r11*(x207.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x208=IKcos(j8);
IkReal x209=IKsin(j8);
IkReal x210=((1.0)*x208);
IkReal x211=((1.0)*x209);
if((((1.0)+(((-1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
IkReal x212=IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2)))));
IkReal x213=((1.0)*x212);
evalcond[0]=x209;
evalcond[1]=((-1.0)*x208);
evalcond[2]=((((-1.0)*gconst2*x210))+new_r11);
evalcond[3]=((((-1.0)*gconst2*x211))+new_r10);
evalcond[4]=(((x208*x212))+new_r01);
evalcond[5]=(((x209*x212))+new_r00);
evalcond[6]=(((gconst2*new_r10))+(((-1.0)*x211))+(((-1.0)*new_r00*x213)));
evalcond[7]=(((gconst2*new_r11))+(((-1.0)*new_r01*x213))+(((-1.0)*x210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x214=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x214.valid){
continue;
}
CheckValue<IkReal> x215 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x215.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x214.value)))+(x215.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x216=IKcos(j8);
IkReal x217=IKsin(j8);
IkReal x218=((1.0)*x216);
IkReal x219=((1.0)*x217);
if((((1.0)+(((-1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
IkReal x220=IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2)))));
IkReal x221=((1.0)*x220);
evalcond[0]=x217;
evalcond[1]=((-1.0)*x216);
evalcond[2]=((((-1.0)*gconst2*x218))+new_r11);
evalcond[3]=((((-1.0)*gconst2*x219))+new_r10);
evalcond[4]=(((x216*x220))+new_r01);
evalcond[5]=(((x217*x220))+new_r00);
evalcond[6]=(((gconst2*new_r10))+(((-1.0)*x219))+(((-1.0)*new_r00*x221)));
evalcond[7]=((((-1.0)*new_r01*x221))+((gconst2*new_r11))+(((-1.0)*x218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x222=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x222.valid){
continue;
}
if((x222.value) < -0.00001)
continue;
IkReal gconst2=IKsqrt(x222.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj6)))))+(IKabs((cj6+(((-1.0)*gconst2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
sj6=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2)))))));
cj6=gconst2;
if( (gconst2) < -1-IKFAST_SINCOS_THRESH || (gconst2) > 1+IKFAST_SINCOS_THRESH )
    continue;
j6=((-1.0)*(IKacos(gconst2)));
CheckValue<IkReal> x223=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x223.valid){
continue;
}
if((x223.value) < -0.00001)
continue;
IkReal gconst2=IKsqrt(x223.value);
j8eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if((((1.0)+(((-1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
CheckValue<IkReal> x224=IKPowWithIntegerCheck(gconst2,-1);
if(!x224.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2))))))))+((gconst2*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x224.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2))))))))+((gconst2*new_r10))))+IKsqr((new_r11*(x224.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2))))))))+((gconst2*new_r10))), (new_r11*(x224.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x225=IKcos(j8);
IkReal x226=IKsin(j8);
IkReal x227=((1.0)*x225);
IkReal x228=((1.0)*x226);
if((((1.0)+(((-1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
IkReal x229=IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2)))));
evalcond[0]=x226;
evalcond[1]=((-1.0)*x225);
evalcond[2]=((((-1.0)*gconst2*x227))+new_r11);
evalcond[3]=((((-1.0)*gconst2*x228))+new_r10);
evalcond[4]=((((-1.0)*x227*x229))+new_r01);
evalcond[5]=((((-1.0)*x228*x229))+new_r00);
evalcond[6]=(((new_r00*x229))+((gconst2*new_r10))+(((-1.0)*x228)));
evalcond[7]=(((gconst2*new_r11))+((new_r01*x229))+(((-1.0)*x227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x230=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x230.valid){
continue;
}
CheckValue<IkReal> x231 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x231.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x230.value)))+(x231.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x232=IKcos(j8);
IkReal x233=IKsin(j8);
IkReal x234=((1.0)*x232);
IkReal x235=((1.0)*x233);
if((((1.0)+(((-1.0)*(gconst2*gconst2))))) < -0.00001)
continue;
IkReal x236=IKsqrt(((1.0)+(((-1.0)*(gconst2*gconst2)))));
evalcond[0]=x233;
evalcond[1]=((-1.0)*x232);
evalcond[2]=((((-1.0)*gconst2*x234))+new_r11);
evalcond[3]=((((-1.0)*gconst2*x235))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x234*x236)));
evalcond[5]=((((-1.0)*x235*x236))+new_r00);
evalcond[6]=(((gconst2*new_r10))+((new_r00*x236))+(((-1.0)*x235)));
evalcond[7]=(((gconst2*new_r11))+((new_r01*x236))+(((-1.0)*x234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x237=new_r22*new_r22;
CheckValue<IkReal> x238=IKPowWithIntegerCheck((((cj6*x237))+(((-1.0)*cj6))),-1);
if(!x238.valid){
continue;
}
CheckValue<IkReal> x239=IKPowWithIntegerCheck(((((-1.0)*sj6))+((sj6*x237))),-1);
if(!x239.valid){
continue;
}
if( IKabs(((x238.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x239.value)*((((new_r10*new_r22))+new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x238.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))))+IKsqr(((x239.value)*((((new_r10*new_r22))+new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x238.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))), ((x239.value)*((((new_r10*new_r22))+new_r01))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x240=IKsin(j8);
IkReal x241=IKcos(j8);
IkReal x242=(cj6*new_r00);
IkReal x243=(cj6*new_r22);
IkReal x244=(new_r11*sj6);
IkReal x245=(new_r10*sj6);
IkReal x246=((1.0)*sj6);
IkReal x247=((1.0)*x241);
IkReal x248=((1.0)*x240);
IkReal x249=(new_r22*x240);
evalcond[0]=(x244+x249+((cj6*new_r01)));
evalcond[1]=(((new_r22*x244))+x240+((new_r01*x243)));
evalcond[2]=((((-1.0)*new_r00*x246))+((cj6*new_r10))+(((-1.0)*x248)));
evalcond[3]=((((-1.0)*new_r01*x246))+((cj6*new_r11))+(((-1.0)*x247)));
evalcond[4]=(((x240*x243))+((sj6*x241))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x247))+x242+x245);
evalcond[6]=((((-1.0)*x243*x247))+((sj6*x240))+new_r00);
evalcond[7]=((((-1.0)*cj6*x247))+((sj6*x249))+new_r11);
evalcond[8]=(((new_r22*x245))+((new_r22*x242))+(((-1.0)*x247)));
evalcond[9]=((((-1.0)*cj6*x248))+new_r10+(((-1.0)*new_r22*x241*x246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x250=((1.0)*sj6);
CheckValue<IkReal> x251=IKPowWithIntegerCheck(new_r22,-1);
if(!x251.valid){
continue;
}
if( IKabs(((x251.value)*(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x250)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x250))+((cj6*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x251.value)*(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x250))))))+IKsqr(((((-1.0)*new_r01*x250))+((cj6*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x251.value)*(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r11*x250))))), ((((-1.0)*new_r01*x250))+((cj6*new_r11))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x252=IKsin(j8);
IkReal x253=IKcos(j8);
IkReal x254=(cj6*new_r00);
IkReal x255=(cj6*new_r22);
IkReal x256=(new_r11*sj6);
IkReal x257=(new_r10*sj6);
IkReal x258=((1.0)*sj6);
IkReal x259=((1.0)*x253);
IkReal x260=((1.0)*x252);
IkReal x261=(new_r22*x252);
evalcond[0]=(x256+x261+((cj6*new_r01)));
evalcond[1]=(((new_r01*x255))+x252+((new_r22*x256)));
evalcond[2]=(((cj6*new_r10))+(((-1.0)*x260))+(((-1.0)*new_r00*x258)));
evalcond[3]=((((-1.0)*new_r01*x258))+((cj6*new_r11))+(((-1.0)*x259)));
evalcond[4]=(((sj6*x253))+((x252*x255))+new_r01);
evalcond[5]=(x254+x257+(((-1.0)*new_r22*x259)));
evalcond[6]=(((sj6*x252))+(((-1.0)*x255*x259))+new_r00);
evalcond[7]=(((sj6*x261))+new_r11+(((-1.0)*cj6*x259)));
evalcond[8]=(((new_r22*x254))+((new_r22*x257))+(((-1.0)*x259)));
evalcond[9]=((((-1.0)*cj6*x260))+(((-1.0)*new_r22*x253*x258))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x262=cj6*cj6;
IkReal x263=(cj6*new_r22);
CheckValue<IkReal> x264=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x262*(new_r22*new_r22)))+x262)),-1);
if(!x264.valid){
continue;
}
CheckValue<IkReal> x265 = IKatan2WithCheck(IkReal((((new_r00*sj6))+((new_r01*x263)))),IkReal((((new_r01*sj6))+(((-1.0)*new_r00*x263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x265.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x264.value)))+(x265.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[10];
IkReal x266=IKsin(j8);
IkReal x267=IKcos(j8);
IkReal x268=(cj6*new_r00);
IkReal x269=(cj6*new_r22);
IkReal x270=(new_r11*sj6);
IkReal x271=(new_r10*sj6);
IkReal x272=((1.0)*sj6);
IkReal x273=((1.0)*x267);
IkReal x274=((1.0)*x266);
IkReal x275=(new_r22*x266);
evalcond[0]=(x275+x270+((cj6*new_r01)));
evalcond[1]=(((new_r22*x270))+x266+((new_r01*x269)));
evalcond[2]=((((-1.0)*new_r00*x272))+((cj6*new_r10))+(((-1.0)*x274)));
evalcond[3]=((((-1.0)*new_r01*x272))+((cj6*new_r11))+(((-1.0)*x273)));
evalcond[4]=(((x266*x269))+((sj6*x267))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x273))+x268+x271);
evalcond[6]=((((-1.0)*x269*x273))+((sj6*x266))+new_r00);
evalcond[7]=((((-1.0)*cj6*x273))+((sj6*x275))+new_r11);
evalcond[8]=(((new_r22*x268))+((new_r22*x271))+(((-1.0)*x273)));
evalcond[9]=((((-1.0)*cj6*x274))+new_r10+(((-1.0)*new_r22*x267*x272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x277=IKPowWithIntegerCheck(sj7,-1);
if(!x277.valid){
continue;
}
IkReal x276=x277.value;
CheckValue<IkReal> x278=IKPowWithIntegerCheck(new_r12,-1);
if(!x278.valid){
continue;
}
if( IKabs((x276*(x278.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x276)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x276*(x278.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x276))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x276*(x278.value)*(((1.0)+(((-1.0)*(cj7*cj7)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x276));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x279=IKcos(j6);
IkReal x280=IKsin(j6);
IkReal x281=((1.0)*sj7);
IkReal x282=((1.0)*cj7);
IkReal x283=(new_r12*x280);
IkReal x284=(new_r02*x279);
evalcond[0]=(new_r02+(((-1.0)*x279*x281)));
evalcond[1]=((((-1.0)*x280*x281))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x280))+((new_r12*x279)));
evalcond[3]=(x284+x283+(((-1.0)*x281)));
evalcond[4]=(((cj7*x283))+((cj7*x284))+(((-1.0)*new_r22*x281)));
evalcond[5]=((((-1.0)*new_r00*x279*x281))+(((-1.0)*new_r10*x280*x281))+(((-1.0)*new_r20*x282)));
evalcond[6]=((((-1.0)*new_r01*x279*x281))+(((-1.0)*new_r11*x280*x281))+(((-1.0)*new_r21*x282)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x282))+(((-1.0)*x281*x283))+(((-1.0)*x281*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=sj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=cj6;
j8eval[1]=cj7;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x285=IKsin(j8);
IkReal x286=((1.0)*(IKcos(j8)));
evalcond[0]=(x285+new_r11);
evalcond[1]=((((-1.0)*x286))+new_r10);
evalcond[2]=((((-1.0)*x285))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x286))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x287=IKcos(j8);
IkReal x288=((1.0)*(IKsin(j8)));
evalcond[0]=(x287+new_r10);
evalcond[1]=((((-1.0)*x288))+new_r11);
evalcond[2]=((((-1.0)*x288))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x287))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x289=IKcos(j8);
IkReal x290=((1.0)*(IKsin(j8)));
evalcond[0]=(x289+new_r20);
evalcond[1]=((((-1.0)*x290))+new_r21);
evalcond[2]=((((-1.0)*x290))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x289))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x291=IKsin(j8);
IkReal x292=((1.0)*(IKcos(j8)));
evalcond[0]=(x291+new_r21);
evalcond[1]=((((-1.0)*x292))+new_r20);
evalcond[2]=((((-1.0)*x291))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x292))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x293=IKsin(j8);
IkReal x294=IKcos(j8);
IkReal x295=((-1.0)*x294);
evalcond[0]=x293;
evalcond[1]=(new_r22*x293);
evalcond[2]=x295;
evalcond[3]=(new_r22*x295);
evalcond[4]=((((-1.0)*x293))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x294))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x296=IKPowWithIntegerCheck(sj7,-1);
if(!x296.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x296.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x296.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x296.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x297=IKsin(j8);
IkReal x298=IKcos(j8);
IkReal x299=((1.0)*sj7);
IkReal x300=((1.0)*x298);
evalcond[0]=(new_r20+((sj7*x298)));
evalcond[1]=(((cj7*x297))+new_r11);
evalcond[2]=((((-1.0)*x297*x299))+new_r21);
evalcond[3]=((((-1.0)*cj7*x300))+new_r10);
evalcond[4]=((((-1.0)*x297))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x300)));
evalcond[6]=((((-1.0)*new_r21*x299))+x297+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x299))+(((-1.0)*x300))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x301=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x301.valid){
continue;
}
CheckValue<IkReal> x302 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x302.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x301.value)))+(x302.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x303=IKsin(j8);
IkReal x304=IKcos(j8);
IkReal x305=((1.0)*sj7);
IkReal x306=((1.0)*x304);
evalcond[0]=(((sj7*x304))+new_r20);
evalcond[1]=(((cj7*x303))+new_r11);
evalcond[2]=((((-1.0)*x303*x305))+new_r21);
evalcond[3]=((((-1.0)*cj7*x306))+new_r10);
evalcond[4]=((((-1.0)*x303))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x306)));
evalcond[6]=((((-1.0)*new_r21*x305))+x303+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x305))+(((-1.0)*x306))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x307=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x307.valid){
continue;
}
CheckValue<IkReal> x308 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x308.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x307.value)))+(x308.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x309=IKsin(j8);
IkReal x310=IKcos(j8);
IkReal x311=((1.0)*sj7);
IkReal x312=((1.0)*x310);
evalcond[0]=(((sj7*x310))+new_r20);
evalcond[1]=(((cj7*x309))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x309*x311)));
evalcond[3]=((((-1.0)*cj7*x312))+new_r10);
evalcond[4]=((((-1.0)*x309))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x312))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x311))+x309+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x311))+(((-1.0)*x312))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r00, new_r01);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x313=IKcos(j8);
IkReal x314=IKsin(j8);
IkReal x315=((1.0)*cj7);
IkReal x316=((1.0)*sj7);
IkReal x317=((1.0)*x313);
evalcond[0]=(((sj7*x313))+new_r20);
evalcond[1]=((((-1.0)*x314))+new_r00);
evalcond[2]=((((-1.0)*x317))+new_r01);
evalcond[3]=((((-1.0)*x314*x316))+new_r21);
evalcond[4]=((((-1.0)*new_r11))+((cj7*x314)));
evalcond[5]=((((-1.0)*x313*x315))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r21*x316))+(((-1.0)*new_r11*x315))+x314);
evalcond[7]=((((-1.0)*new_r20*x316))+(((-1.0)*new_r10*x315))+(((-1.0)*x317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x318=IKcos(j8);
IkReal x319=IKsin(j8);
IkReal x320=((1.0)*sj6);
IkReal x321=((1.0)*x319);
IkReal x322=((1.0)*x318);
evalcond[0]=(x318+new_r20);
evalcond[1]=((((-1.0)*x321))+new_r21);
evalcond[2]=(((sj6*x318))+new_r01);
evalcond[3]=(((sj6*x319))+new_r00);
evalcond[4]=((((-1.0)*cj6*x322))+new_r11);
evalcond[5]=((((-1.0)*cj6*x321))+new_r10);
evalcond[6]=((((-1.0)*x321))+((cj6*new_r10))+(((-1.0)*new_r00*x320)));
evalcond[7]=((((-1.0)*x322))+(((-1.0)*new_r01*x320))+((cj6*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x323=IKcos(j8);
IkReal x324=IKsin(j8);
IkReal x325=((1.0)*sj6);
IkReal x326=((1.0)*x323);
IkReal x327=((1.0)*x324);
evalcond[0]=(x324+new_r21);
evalcond[1]=((((-1.0)*x326))+new_r20);
evalcond[2]=(((sj6*x323))+new_r01);
evalcond[3]=(((sj6*x324))+new_r00);
evalcond[4]=((((-1.0)*cj6*x326))+new_r11);
evalcond[5]=((((-1.0)*cj6*x327))+new_r10);
evalcond[6]=((((-1.0)*x327))+((cj6*new_r10))+(((-1.0)*new_r00*x325)));
evalcond[7]=((((-1.0)*x326))+(((-1.0)*new_r01*x325))+((cj6*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x328=((1.0)*sj6);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x328))+((cj6*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x328))))+IKsqr(((((-1.0)*new_r01*x328))+((cj6*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x328))), ((((-1.0)*new_r01*x328))+((cj6*new_r00))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x329=IKsin(j8);
IkReal x330=IKcos(j8);
IkReal x331=((1.0)*sj6);
IkReal x332=((1.0)*x330);
IkReal x333=(sj6*x329);
IkReal x334=((1.0)*x329);
IkReal x335=(cj6*x332);
evalcond[0]=(((new_r11*sj6))+x329+((cj6*new_r01)));
evalcond[1]=(((sj6*x330))+new_r01+((cj6*x329)));
evalcond[2]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x332)));
evalcond[3]=(((cj6*new_r10))+(((-1.0)*new_r00*x331))+(((-1.0)*x334)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*x332))+(((-1.0)*new_r01*x331)));
evalcond[5]=(x333+(((-1.0)*x335))+new_r00);
evalcond[6]=(x333+(((-1.0)*x335))+new_r11);
evalcond[7]=((((-1.0)*cj6*x334))+(((-1.0)*x330*x331))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x336=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj6*x336))+((cj6*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*x336))+(((-1.0)*new_r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj6*x336))+((cj6*new_r01))))+IKsqr(((((-1.0)*cj6*x336))+(((-1.0)*new_r01*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*sj6*x336))+((cj6*new_r01))), ((((-1.0)*cj6*x336))+(((-1.0)*new_r01*sj6))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x337=IKcos(j8);
IkReal x338=IKsin(j8);
IkReal x339=((1.0)*sj6);
IkReal x340=((1.0)*cj6);
IkReal x341=((1.0)*x338);
IkReal x342=(sj6*x337);
IkReal x343=(x338*x340);
evalcond[0]=(((new_r10*sj6))+x337+((cj6*new_r00)));
evalcond[1]=(((new_r11*sj6))+((cj6*new_r01))+(((-1.0)*x341)));
evalcond[2]=(((cj6*x337))+((sj6*x338))+new_r00);
evalcond[3]=(((cj6*new_r10))+(((-1.0)*new_r00*x339))+(((-1.0)*x341)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*x337))+(((-1.0)*new_r01*x339)));
evalcond[5]=(x342+new_r01+(((-1.0)*x343)));
evalcond[6]=(x342+new_r10+(((-1.0)*x343)));
evalcond[7]=((((-1.0)*x337*x340))+(((-1.0)*x338*x339))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r10, new_r11);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x344=IKcos(j8);
IkReal x345=IKsin(j8);
IkReal x346=((1.0)*sj7);
IkReal x347=((1.0)*x344);
IkReal x348=((1.0)*x345);
evalcond[0]=(((new_r02*x344))+new_r20);
evalcond[1]=(new_r10+(((-1.0)*x348)));
evalcond[2]=(new_r11+(((-1.0)*x347)));
evalcond[3]=(((cj7*x345))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x348))+new_r21);
evalcond[5]=((((-1.0)*cj7*x347))+new_r00);
evalcond[6]=(x345+(((-1.0)*new_r21*x346))+((cj7*new_r01)));
evalcond[7]=((((-1.0)*new_r20*x346))+(((-1.0)*x347))+((cj7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
j8eval[1]=IKsign(new_r02);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
j8eval[1]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x349=IKcos(j8);
IkReal x350=((1.0)*(IKsin(j8)));
evalcond[0]=(x349+new_r20);
evalcond[1]=((((-1.0)*x350))+new_r21);
evalcond[2]=((((-1.0)*x350))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x351=IKsin(j8);
IkReal x352=((1.0)*(IKcos(j8)));
evalcond[0]=(x351+new_r21);
evalcond[1]=((((-1.0)*x352))+new_r20);
evalcond[2]=((((-1.0)*x351))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x352))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs((cj7*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*new_r01))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((cj7*new_r01), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x353=IKsin(j8);
IkReal x354=IKcos(j8);
IkReal x355=((1.0)*new_r01);
IkReal x356=((1.0)*new_r00);
IkReal x357=((1.0)*x354);
evalcond[0]=(x353+(((-1.0)*cj7*x355)));
evalcond[1]=((((-1.0)*x353))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*x357))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x355))+((cj7*x353)));
evalcond[4]=((((-1.0)*x356))+(((-1.0)*cj7*x357)));
evalcond[5]=((((-1.0)*x357))+(((-1.0)*cj7*x356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x358=IKsin(j8);
IkReal x359=IKcos(j8);
IkReal x360=((-1.0)*x359);
evalcond[0]=x358;
evalcond[1]=(new_r22*x358);
evalcond[2]=x360;
evalcond[3]=(new_r22*x360);
evalcond[4]=((((-1.0)*x358))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x359))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x361=IKPowWithIntegerCheck(new_r02,-1);
if(!x361.valid){
continue;
}
CheckValue<IkReal> x362=IKPowWithIntegerCheck(cj7,-1);
if(!x362.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x361.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x362.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x361.value)))+IKsqr(((-1.0)*new_r00*(x362.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21*(x361.value)), ((-1.0)*new_r00*(x362.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x363=IKsin(j8);
IkReal x364=IKcos(j8);
IkReal x365=((1.0)*new_r01);
IkReal x366=((1.0)*sj7);
IkReal x367=((1.0)*new_r00);
IkReal x368=((1.0)*x364);
evalcond[0]=(new_r21+((new_r02*x363)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x368)));
evalcond[2]=((((-1.0)*x363))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x368))+(((-1.0)*new_r11)));
evalcond[4]=(((cj7*x363))+(((-1.0)*x365)));
evalcond[5]=((((-1.0)*cj7*x368))+(((-1.0)*x367)));
evalcond[6]=((((-1.0)*cj7*x365))+x363+(((-1.0)*new_r21*x366)));
evalcond[7]=((((-1.0)*cj7*x367))+(((-1.0)*new_r20*x366))+(((-1.0)*x368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x369=IKPowWithIntegerCheck(new_r02,-1);
if(!x369.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x369.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x369.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x369.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x370=IKsin(j8);
IkReal x371=IKcos(j8);
IkReal x372=((1.0)*new_r01);
IkReal x373=((1.0)*sj7);
IkReal x374=((1.0)*new_r00);
IkReal x375=((1.0)*x371);
evalcond[0]=(new_r21+((new_r02*x370)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x375)));
evalcond[2]=((((-1.0)*x370))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x375))+(((-1.0)*new_r11)));
evalcond[4]=(((cj7*x370))+(((-1.0)*x372)));
evalcond[5]=((((-1.0)*cj7*x375))+(((-1.0)*x374)));
evalcond[6]=((((-1.0)*new_r21*x373))+(((-1.0)*cj7*x372))+x370);
evalcond[7]=((((-1.0)*new_r20*x373))+(((-1.0)*cj7*x374))+(((-1.0)*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x376 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x376.valid){
continue;
}
CheckValue<IkReal> x377=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x377.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x376.value)+(((1.5707963267949)*(x377.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x378=IKsin(j8);
IkReal x379=IKcos(j8);
IkReal x380=((1.0)*new_r01);
IkReal x381=((1.0)*sj7);
IkReal x382=((1.0)*new_r00);
IkReal x383=((1.0)*x379);
evalcond[0]=(new_r21+((new_r02*x378)));
evalcond[1]=((((-1.0)*new_r02*x383))+new_r20);
evalcond[2]=((((-1.0)*x378))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x383))+(((-1.0)*new_r11)));
evalcond[4]=(((cj7*x378))+(((-1.0)*x380)));
evalcond[5]=((((-1.0)*cj7*x383))+(((-1.0)*x382)));
evalcond[6]=((((-1.0)*cj7*x380))+x378+(((-1.0)*new_r21*x381)));
evalcond[7]=((((-1.0)*cj7*x382))+(((-1.0)*new_r20*x381))+(((-1.0)*x383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=IKabs(new_r22);
if( IKabs(j8eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j8]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x385=IKPowWithIntegerCheck(sj7,-1);
if(!x385.valid){
continue;
}
IkReal x384=x385.value;
CheckValue<IkReal> x386=IKPowWithIntegerCheck(cj6,-1);
if(!x386.valid){
continue;
}
CheckValue<IkReal> x387=IKPowWithIntegerCheck(cj7,-1);
if(!x387.valid){
continue;
}
if( IKabs((x384*(x386.value)*(x387.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x384)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x384*(x386.value)*(x387.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7))))))+IKsqr(((-1.0)*new_r20*x384))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x384*(x386.value)*(x387.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7))))), ((-1.0)*new_r20*x384));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x388=IKsin(j8);
IkReal x389=IKcos(j8);
IkReal x390=(cj6*new_r00);
IkReal x391=((1.0)*sj7);
IkReal x392=(cj6*new_r01);
IkReal x393=(cj7*sj6);
IkReal x394=((1.0)*sj6);
IkReal x395=((1.0)*x389);
IkReal x396=(cj7*x388);
IkReal x397=((1.0)*x388);
IkReal x398=(sj6*x389);
evalcond[0]=(new_r20+((sj7*x389)));
evalcond[1]=((((-1.0)*x388*x391))+new_r21);
evalcond[2]=(((new_r11*sj6))+x396+x392);
evalcond[3]=((((-1.0)*x397))+((cj6*new_r10))+(((-1.0)*new_r00*x394)));
evalcond[4]=((((-1.0)*new_r01*x394))+(((-1.0)*x395))+((cj6*new_r11)));
evalcond[5]=(x398+new_r01+((cj6*x396)));
evalcond[6]=(((new_r10*sj6))+x390+(((-1.0)*cj7*x395)));
evalcond[7]=(((sj6*x388))+(((-1.0)*cj6*cj7*x395))+new_r00);
evalcond[8]=((((-1.0)*cj6*x395))+new_r11+((x388*x393)));
evalcond[9]=((((-1.0)*cj6*x397))+new_r10+(((-1.0)*x393*x395)));
evalcond[10]=(((new_r11*x393))+(((-1.0)*new_r21*x391))+x388+((cj7*x392)));
evalcond[11]=((((-1.0)*x395))+(((-1.0)*new_r20*x391))+((new_r10*x393))+((cj7*x390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x400=IKPowWithIntegerCheck(sj7,-1);
if(!x400.valid){
continue;
}
IkReal x399=x400.value;
CheckValue<IkReal> x401=IKPowWithIntegerCheck(sj6,-1);
if(!x401.valid){
continue;
}
if( IKabs((x399*(x401.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x399)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x399*(x401.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20))))))+IKsqr(((-1.0)*new_r20*x399))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x399*(x401.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20))))), ((-1.0)*new_r20*x399));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x402=IKsin(j8);
IkReal x403=IKcos(j8);
IkReal x404=(cj6*new_r00);
IkReal x405=((1.0)*sj7);
IkReal x406=(cj6*new_r01);
IkReal x407=(cj7*sj6);
IkReal x408=((1.0)*sj6);
IkReal x409=((1.0)*x403);
IkReal x410=(cj7*x402);
IkReal x411=((1.0)*x402);
IkReal x412=(sj6*x403);
evalcond[0]=(((sj7*x403))+new_r20);
evalcond[1]=((((-1.0)*x402*x405))+new_r21);
evalcond[2]=(((new_r11*sj6))+x406+x410);
evalcond[3]=(((cj6*new_r10))+(((-1.0)*new_r00*x408))+(((-1.0)*x411)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*new_r01*x408))+(((-1.0)*x409)));
evalcond[5]=(((cj6*x410))+x412+new_r01);
evalcond[6]=(((new_r10*sj6))+(((-1.0)*cj7*x409))+x404);
evalcond[7]=(((sj6*x402))+new_r00+(((-1.0)*cj6*cj7*x409)));
evalcond[8]=((((-1.0)*cj6*x409))+new_r11+((x402*x407)));
evalcond[9]=((((-1.0)*cj6*x411))+(((-1.0)*x407*x409))+new_r10);
evalcond[10]=(((cj7*x406))+x402+(((-1.0)*new_r21*x405))+((new_r11*x407)));
evalcond[11]=(((cj7*x404))+(((-1.0)*new_r20*x405))+((new_r10*x407))+(((-1.0)*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x413=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x413.valid){
continue;
}
CheckValue<IkReal> x414 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x414.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x413.value)))+(x414.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x415=IKsin(j8);
IkReal x416=IKcos(j8);
IkReal x417=(cj6*new_r00);
IkReal x418=((1.0)*sj7);
IkReal x419=(cj6*new_r01);
IkReal x420=(cj7*sj6);
IkReal x421=((1.0)*sj6);
IkReal x422=((1.0)*x416);
IkReal x423=(cj7*x415);
IkReal x424=((1.0)*x415);
IkReal x425=(sj6*x416);
evalcond[0]=(((sj7*x416))+new_r20);
evalcond[1]=((((-1.0)*x415*x418))+new_r21);
evalcond[2]=(((new_r11*sj6))+x419+x423);
evalcond[3]=((((-1.0)*new_r00*x421))+(((-1.0)*x424))+((cj6*new_r10)));
evalcond[4]=((((-1.0)*x422))+((cj6*new_r11))+(((-1.0)*new_r01*x421)));
evalcond[5]=(((cj6*x423))+x425+new_r01);
evalcond[6]=(((new_r10*sj6))+x417+(((-1.0)*cj7*x422)));
evalcond[7]=((((-1.0)*cj6*cj7*x422))+((sj6*x415))+new_r00);
evalcond[8]=((((-1.0)*cj6*x422))+((x415*x420))+new_r11);
evalcond[9]=((((-1.0)*cj6*x424))+(((-1.0)*x420*x422))+new_r10);
evalcond[10]=(((cj7*x419))+((new_r11*x420))+x415+(((-1.0)*new_r21*x418)));
evalcond[11]=(((cj7*x417))+(((-1.0)*x422))+((new_r10*x420))+(((-1.0)*new_r20*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x426=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x426.valid){
continue;
}
CheckValue<IkReal> x427 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x427.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x426.value)))+(x427.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
evalcond[0]=(new_r20+((sj7*(IKcos(j8)))));
evalcond[1]=((((-1.0)*sj7*(IKsin(j8))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj7;
j6eval[1]=IKsign(sj7);
j6eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=cj8;
j6eval[1]=sj7;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x428=IKsin(j6);
IkReal x429=IKcos(j6);
IkReal x430=((1.0)*sj7);
IkReal x431=(new_r22*x429);
IkReal x432=(new_r22*x428);
IkReal x433=((1.0)*x428);
IkReal x434=(new_r00*x429);
IkReal x435=(new_r02*x429);
IkReal x436=(new_r01*x429);
evalcond[0]=(x428+new_r00);
evalcond[1]=(x431+new_r01);
evalcond[2]=(x432+new_r11);
evalcond[3]=((((-1.0)*x429))+new_r10);
evalcond[4]=((((-1.0)*x429*x430))+new_r02);
evalcond[5]=(new_r12+(((-1.0)*x428*x430)));
evalcond[6]=(((new_r10*x428))+x434);
evalcond[7]=(((new_r12*x429))+(((-1.0)*new_r02*x433)));
evalcond[8]=((((-1.0)*new_r01*x433))+((new_r11*x429)));
evalcond[9]=(((new_r11*x428))+x436+new_r22);
evalcond[10]=((-1.0)+(((-1.0)*new_r00*x433))+((new_r10*x429)));
evalcond[11]=(((new_r00*x431))+((new_r10*x432)));
evalcond[12]=((((-1.0)*x430))+x435+((new_r12*x428)));
evalcond[13]=((((-1.0)*x430*x434))+(((-1.0)*new_r10*x428*x430)));
evalcond[14]=(((new_r12*x432))+((new_r02*x431))+(((-1.0)*new_r22*x430)));
evalcond[15]=((((-1.0)*x430*x436))+(((-1.0)*cj7*new_r21))+(((-1.0)*new_r11*x428*x430)));
evalcond[16]=((1.0)+((new_r01*x431))+(((-1.0)*sj7*x430))+((new_r11*x432)));
evalcond[17]=((1.0)+(((-1.0)*x430*x435))+(((-1.0)*(new_r22*new_r22)))+(((-1.0)*new_r12*x428*x430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x437=IKcos(j6);
IkReal x438=IKsin(j6);
IkReal x439=(new_r22*sj7);
IkReal x440=((1.0)*sj7);
IkReal x441=((1.0)*new_r22);
IkReal x442=(new_r01*x437);
IkReal x443=(new_r22*x438);
IkReal x444=((1.0)*x438);
IkReal x445=(new_r00*x437);
IkReal x446=(new_r02*x437);
evalcond[0]=(x437+new_r10);
evalcond[1]=((((-1.0)*x444))+new_r00);
evalcond[2]=((((-1.0)*x437*x440))+new_r02);
evalcond[3]=((((-1.0)*x438*x440))+new_r12);
evalcond[4]=((((-1.0)*x437*x441))+new_r01);
evalcond[5]=((((-1.0)*x438*x441))+new_r11);
evalcond[6]=(((new_r10*x438))+x445);
evalcond[7]=(((new_r12*x437))+(((-1.0)*new_r02*x444)));
evalcond[8]=((((-1.0)*new_r01*x444))+((new_r11*x437)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x444))+((new_r10*x437)));
evalcond[10]=(((new_r22*x445))+((new_r10*x443)));
evalcond[11]=((((-1.0)*x440))+((new_r12*x438))+x446);
evalcond[12]=((((-1.0)*x441))+((new_r11*x438))+x442);
evalcond[13]=((((-1.0)*new_r10*x438*x440))+(((-1.0)*x440*x445)));
evalcond[14]=(((new_r22*x446))+(((-1.0)*x439))+((new_r12*x443)));
evalcond[15]=((-1.0)+((new_r22*x442))+(sj7*sj7)+((new_r11*x443)));
evalcond[16]=((((-1.0)*new_r11*x438*x440))+x439+(((-1.0)*x440*x442)));
evalcond[17]=((1.0)+(((-1.0)*new_r12*x438*x440))+(((-1.0)*x440*x446))+(((-1.0)*new_r22*x441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x447=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj8*x447))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj8*x447))+((cj8*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*x447))+(((-1.0)*new_r00*sj8))))+IKsqr(((((-1.0)*sj8*x447))+((cj8*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj8*x447))+(((-1.0)*new_r00*sj8))), ((((-1.0)*sj8*x447))+((cj8*new_r00))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x448=IKsin(j6);
IkReal x449=IKcos(j6);
IkReal x450=((1.0)*cj8);
IkReal x451=((1.0)*sj8);
IkReal x452=(sj8*x448);
IkReal x453=((1.0)*x448);
IkReal x454=(x449*x450);
evalcond[0]=(((new_r01*x449))+sj8+((new_r11*x448)));
evalcond[1]=(((cj8*x448))+new_r01+((sj8*x449)));
evalcond[2]=((((-1.0)*x454))+x452+new_r00);
evalcond[3]=((((-1.0)*x454))+x452+new_r11);
evalcond[4]=(((new_r00*x449))+(((-1.0)*x450))+((new_r10*x448)));
evalcond[5]=(new_r10+(((-1.0)*x449*x451))+(((-1.0)*x448*x450)));
evalcond[6]=((((-1.0)*new_r00*x453))+(((-1.0)*x451))+((new_r10*x449)));
evalcond[7]=((((-1.0)*new_r01*x453))+(((-1.0)*x450))+((new_r11*x449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x455=((1.0)*cj8);
if( IKabs(((((-1.0)*new_r01*x455))+(((-1.0)*new_r00*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj8))+(((-1.0)*new_r00*x455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x455))+(((-1.0)*new_r00*sj8))))+IKsqr((((new_r01*sj8))+(((-1.0)*new_r00*x455))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r01*x455))+(((-1.0)*new_r00*sj8))), (((new_r01*sj8))+(((-1.0)*new_r00*x455))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x456=IKcos(j6);
IkReal x457=IKsin(j6);
IkReal x458=((1.0)*sj8);
IkReal x459=(cj8*x457);
IkReal x460=(cj8*x456);
IkReal x461=((1.0)*x457);
IkReal x462=(x456*x458);
evalcond[0]=(((new_r10*x457))+cj8+((new_r00*x456)));
evalcond[1]=(x460+((sj8*x457))+new_r00);
evalcond[2]=((((-1.0)*x462))+x459+new_r01);
evalcond[3]=((((-1.0)*x462))+x459+new_r10);
evalcond[4]=(((new_r11*x457))+((new_r01*x456))+(((-1.0)*x458)));
evalcond[5]=((((-1.0)*x460))+new_r11+(((-1.0)*x457*x458)));
evalcond[6]=(((new_r10*x456))+(((-1.0)*x458))+(((-1.0)*new_r00*x461)));
evalcond[7]=(((new_r11*x456))+(((-1.0)*new_r01*x461))+(((-1.0)*cj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x464 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x464.valid){
continue;
}
IkReal x463=x464.value;
j6array[0]=((-1.0)*x463);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x463)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x465=IKsin(j6);
IkReal x466=IKcos(j6);
IkReal x467=(new_r10*x465);
IkReal x468=((1.0)*x465);
IkReal x469=(new_r00*x466);
evalcond[0]=(((new_r11*x465))+((new_r01*x466)));
evalcond[1]=(x469+x467);
evalcond[2]=(((new_r10*x466))+(((-1.0)*new_r00*x468)));
evalcond[3]=(((new_r11*x466))+(((-1.0)*new_r01*x468)));
evalcond[4]=(((new_r22*x467))+((new_r22*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x471 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x471.valid){
continue;
}
IkReal x470=x471.value;
j6array[0]=((-1.0)*x470);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x470)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x472=IKcos(j6);
IkReal x473=IKsin(j6);
IkReal x474=(new_r01*x472);
IkReal x475=((1.0)*x473);
IkReal x476=(new_r22*x473);
evalcond[0]=(((new_r11*x473))+x474);
evalcond[1]=(((new_r10*x472))+(((-1.0)*new_r00*x475)));
evalcond[2]=(((new_r11*x472))+(((-1.0)*new_r01*x475)));
evalcond[3]=(((new_r11*x476))+((new_r22*x474)));
evalcond[4]=(((new_r00*new_r22*x472))+((new_r10*x476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
CheckValue<IkReal> x478 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x478.valid){
continue;
}
IkReal x477=x478.value;
j6array[0]=((-1.0)*x477);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x477)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x479=IKcos(j6);
IkReal x480=IKsin(j6);
IkReal x481=(new_r22*x479);
IkReal x482=(new_r22*x480);
IkReal x483=((1.0)*x480);
evalcond[0]=(((new_r00*x479))+((new_r10*x480)));
evalcond[1]=((((-1.0)*new_r00*x483))+((new_r10*x479)));
evalcond[2]=((((-1.0)*new_r01*x483))+((new_r11*x479)));
evalcond[3]=(((new_r11*x482))+((new_r01*x481)));
evalcond[4]=(((new_r10*x482))+((new_r00*x481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x485=IKPowWithIntegerCheck(sj7,-1);
if(!x485.valid){
continue;
}
IkReal x484=x485.value;
CheckValue<IkReal> x486=IKPowWithIntegerCheck(cj8,-1);
if(!x486.valid){
continue;
}
if( IKabs((x484*(x486.value)*(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*new_r02*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x484)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x484*(x486.value)*(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*new_r02*sj8))))))+IKsqr((new_r02*x484))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x484*(x486.value)*(((((-1.0)*new_r01*sj7))+(((-1.0)*cj7*new_r02*sj8))))), (new_r02*x484));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x487=IKcos(j6);
IkReal x488=IKsin(j6);
IkReal x489=((1.0)*cj8);
IkReal x490=((1.0)*sj7);
IkReal x491=((1.0)*cj7);
IkReal x492=(cj7*sj8);
IkReal x493=((1.0)*sj8);
IkReal x494=(cj7*x488);
IkReal x495=((1.0)*x488);
IkReal x496=(new_r00*x487);
IkReal x497=(new_r02*x487);
IkReal x498=(new_r01*x487);
IkReal x499=(cj8*x487);
evalcond[0]=((((-1.0)*x487*x490))+new_r02);
evalcond[1]=((((-1.0)*x488*x490))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x495))+((new_r12*x487)));
evalcond[3]=(new_r01+((cj8*x488))+((x487*x492)));
evalcond[4]=((((-1.0)*x490))+((new_r12*x488))+x497);
evalcond[5]=(((new_r11*x488))+x498+x492);
evalcond[6]=((((-1.0)*cj7*x487*x489))+((sj8*x488))+new_r00);
evalcond[7]=(((x488*x492))+(((-1.0)*x487*x489))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x495))+(((-1.0)*x493))+((new_r10*x487)));
evalcond[9]=((((-1.0)*new_r01*x495))+(((-1.0)*x489))+((new_r11*x487)));
evalcond[10]=(((new_r10*x488))+x496+(((-1.0)*cj7*x489)));
evalcond[11]=((((-1.0)*x489*x494))+(((-1.0)*x487*x493))+new_r10);
evalcond[12]=(((cj7*x497))+((new_r12*x494))+(((-1.0)*new_r22*x490)));
evalcond[13]=(sj8+((cj7*x498))+(((-1.0)*new_r21*x490))+((new_r11*x494)));
evalcond[14]=((((-1.0)*new_r20*x491))+(((-1.0)*x490*x496))+(((-1.0)*new_r10*x488*x490)));
evalcond[15]=((((-1.0)*new_r21*x491))+(((-1.0)*x490*x498))+(((-1.0)*new_r11*x488*x490)));
evalcond[16]=((1.0)+(((-1.0)*x490*x497))+(((-1.0)*new_r22*x491))+(((-1.0)*new_r12*x488*x490)));
evalcond[17]=((((-1.0)*new_r20*x490))+(((-1.0)*x489))+((cj7*x496))+((new_r10*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x500=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x500.valid){
continue;
}
CheckValue<IkReal> x501 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x501.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x500.value)))+(x501.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[18];
IkReal x502=IKcos(j6);
IkReal x503=IKsin(j6);
IkReal x504=((1.0)*cj8);
IkReal x505=((1.0)*sj7);
IkReal x506=((1.0)*cj7);
IkReal x507=(cj7*sj8);
IkReal x508=((1.0)*sj8);
IkReal x509=(cj7*x503);
IkReal x510=((1.0)*x503);
IkReal x511=(new_r00*x502);
IkReal x512=(new_r02*x502);
IkReal x513=(new_r01*x502);
IkReal x514=(cj8*x502);
evalcond[0]=((((-1.0)*x502*x505))+new_r02);
evalcond[1]=((((-1.0)*x503*x505))+new_r12);
evalcond[2]=(((new_r12*x502))+(((-1.0)*new_r02*x510)));
evalcond[3]=(((cj8*x503))+((x502*x507))+new_r01);
evalcond[4]=((((-1.0)*x505))+x512+((new_r12*x503)));
evalcond[5]=(((new_r11*x503))+x507+x513);
evalcond[6]=((((-1.0)*cj7*x502*x504))+((sj8*x503))+new_r00);
evalcond[7]=((((-1.0)*x502*x504))+((x503*x507))+new_r11);
evalcond[8]=((((-1.0)*x508))+((new_r10*x502))+(((-1.0)*new_r00*x510)));
evalcond[9]=((((-1.0)*x504))+((new_r11*x502))+(((-1.0)*new_r01*x510)));
evalcond[10]=((((-1.0)*cj7*x504))+((new_r10*x503))+x511);
evalcond[11]=((((-1.0)*x502*x508))+(((-1.0)*x504*x509))+new_r10);
evalcond[12]=(((cj7*x512))+((new_r12*x509))+(((-1.0)*new_r22*x505)));
evalcond[13]=((((-1.0)*new_r21*x505))+sj8+((cj7*x513))+((new_r11*x509)));
evalcond[14]=((((-1.0)*new_r10*x503*x505))+(((-1.0)*new_r20*x506))+(((-1.0)*x505*x511)));
evalcond[15]=((((-1.0)*new_r21*x506))+(((-1.0)*new_r11*x503*x505))+(((-1.0)*x505*x513)));
evalcond[16]=((1.0)+(((-1.0)*x505*x512))+(((-1.0)*new_r12*x503*x505))+(((-1.0)*new_r22*x506)));
evalcond[17]=((((-1.0)*new_r20*x505))+(((-1.0)*x504))+((cj7*x511))+((new_r10*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x515=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x515.valid){
continue;
}
CheckValue<IkReal> x516 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x516.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x515.value)))+(x516.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x517=IKcos(j6);
IkReal x518=IKsin(j6);
IkReal x519=((1.0)*sj7);
IkReal x520=((1.0)*cj7);
IkReal x521=(new_r12*x518);
IkReal x522=(new_r02*x517);
evalcond[0]=((((-1.0)*x517*x519))+new_r02);
evalcond[1]=((((-1.0)*x518*x519))+new_r12);
evalcond[2]=(((new_r12*x517))+(((-1.0)*new_r02*x518)));
evalcond[3]=(x522+x521+(((-1.0)*x519)));
evalcond[4]=(((cj7*x521))+((cj7*x522))+(((-1.0)*new_r22*x519)));
evalcond[5]=((((-1.0)*new_r20*x520))+(((-1.0)*new_r10*x518*x519))+(((-1.0)*new_r00*x517*x519)));
evalcond[6]=((((-1.0)*new_r11*x518*x519))+(((-1.0)*new_r21*x520))+(((-1.0)*new_r01*x517*x519)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x520))+(((-1.0)*x519*x522))+(((-1.0)*x519*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
j8eval[0]=sj6;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j8eval[0]=cj6;
j8eval[1]=cj7;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=sj7;
j8eval[1]=IKsign(sj7);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=cj7;
j8eval[1]=IKsign(cj7);
j8eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
j8eval[0]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x523=IKsin(j8);
IkReal x524=((1.0)*(IKcos(j8)));
evalcond[0]=(x523+new_r11);
evalcond[1]=((((-1.0)*x524))+new_r10);
evalcond[2]=((((-1.0)*x523))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x524))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x525=IKcos(j8);
IkReal x526=((1.0)*(IKsin(j8)));
evalcond[0]=(x525+new_r10);
evalcond[1]=((((-1.0)*x526))+new_r11);
evalcond[2]=((((-1.0)*x526))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x525))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x527=IKcos(j8);
IkReal x528=((1.0)*(IKsin(j8)));
evalcond[0]=(x527+new_r20);
evalcond[1]=((((-1.0)*x528))+new_r21);
evalcond[2]=((((-1.0)*x528))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x527))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x529=IKsin(j8);
IkReal x530=((1.0)*(IKcos(j8)));
evalcond[0]=(x529+new_r21);
evalcond[1]=((((-1.0)*x530))+new_r20);
evalcond[2]=((((-1.0)*x529))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x530))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x531=IKsin(j8);
IkReal x532=IKcos(j8);
IkReal x533=((-1.0)*x532);
evalcond[0]=x531;
evalcond[1]=(new_r22*x531);
evalcond[2]=x533;
evalcond[3]=(new_r22*x533);
evalcond[4]=((((-1.0)*x531))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x532))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x534=IKPowWithIntegerCheck(sj7,-1);
if(!x534.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x534.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x534.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x534.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x535=IKsin(j8);
IkReal x536=IKcos(j8);
IkReal x537=((1.0)*sj7);
IkReal x538=((1.0)*x536);
evalcond[0]=(((sj7*x536))+new_r20);
evalcond[1]=(((cj7*x535))+new_r11);
evalcond[2]=((((-1.0)*x535*x537))+new_r21);
evalcond[3]=((((-1.0)*cj7*x538))+new_r10);
evalcond[4]=((((-1.0)*x535))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x538))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x537))+x535+((cj7*new_r11)));
evalcond[7]=((((-1.0)*x538))+(((-1.0)*new_r20*x537))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x539=IKPowWithIntegerCheck(IKsign(cj7),-1);
if(!x539.valid){
continue;
}
CheckValue<IkReal> x540 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x540.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x539.value)))+(x540.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x541=IKsin(j8);
IkReal x542=IKcos(j8);
IkReal x543=((1.0)*sj7);
IkReal x544=((1.0)*x542);
evalcond[0]=(((sj7*x542))+new_r20);
evalcond[1]=(((cj7*x541))+new_r11);
evalcond[2]=((((-1.0)*x541*x543))+new_r21);
evalcond[3]=((((-1.0)*cj7*x544))+new_r10);
evalcond[4]=((((-1.0)*x541))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x544))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x543))+x541+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x543))+(((-1.0)*x544))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x545=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x545.valid){
continue;
}
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x545.value)))+(x546.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x547=IKsin(j8);
IkReal x548=IKcos(j8);
IkReal x549=((1.0)*sj7);
IkReal x550=((1.0)*x548);
evalcond[0]=(((sj7*x548))+new_r20);
evalcond[1]=(((cj7*x547))+new_r11);
evalcond[2]=((((-1.0)*x547*x549))+new_r21);
evalcond[3]=((((-1.0)*cj7*x550))+new_r10);
evalcond[4]=((((-1.0)*x547))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x550))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x549))+x547+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r20*x549))+(((-1.0)*x550))+((cj7*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r00, new_r01);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x551=IKcos(j8);
IkReal x552=IKsin(j8);
IkReal x553=((1.0)*cj7);
IkReal x554=((1.0)*sj7);
IkReal x555=((1.0)*x551);
evalcond[0]=(new_r20+((sj7*x551)));
evalcond[1]=((((-1.0)*x552))+new_r00);
evalcond[2]=((((-1.0)*x555))+new_r01);
evalcond[3]=((((-1.0)*x552*x554))+new_r21);
evalcond[4]=(((cj7*x552))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x551*x553))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r21*x554))+(((-1.0)*new_r11*x553))+x552);
evalcond[7]=((((-1.0)*new_r10*x553))+(((-1.0)*x555))+(((-1.0)*new_r20*x554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x556=IKcos(j8);
IkReal x557=IKsin(j8);
IkReal x558=((1.0)*sj6);
IkReal x559=((1.0)*x557);
IkReal x560=((1.0)*x556);
evalcond[0]=(x556+new_r20);
evalcond[1]=((((-1.0)*x559))+new_r21);
evalcond[2]=(((sj6*x556))+new_r01);
evalcond[3]=(((sj6*x557))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*cj6*x560)));
evalcond[5]=((((-1.0)*cj6*x559))+new_r10);
evalcond[6]=(((cj6*new_r10))+(((-1.0)*new_r00*x558))+(((-1.0)*x559)));
evalcond[7]=((((-1.0)*new_r01*x558))+((cj6*new_r11))+(((-1.0)*x560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x561=IKcos(j8);
IkReal x562=IKsin(j8);
IkReal x563=((1.0)*sj6);
IkReal x564=((1.0)*x561);
IkReal x565=((1.0)*x562);
evalcond[0]=(x562+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x564)));
evalcond[2]=(((sj6*x561))+new_r01);
evalcond[3]=(((sj6*x562))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*cj6*x564)));
evalcond[5]=(new_r10+(((-1.0)*cj6*x565)));
evalcond[6]=((((-1.0)*new_r00*x563))+((cj6*new_r10))+(((-1.0)*x565)));
evalcond[7]=(((cj6*new_r11))+(((-1.0)*x564))+(((-1.0)*new_r01*x563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x566=((1.0)*sj6);
if( IKabs(((((-1.0)*new_r00*x566))+(((-1.0)*cj6*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*new_r00))+(((-1.0)*new_r01*x566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x566))+(((-1.0)*cj6*new_r01))))+IKsqr((((cj6*new_r00))+(((-1.0)*new_r01*x566))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*new_r00*x566))+(((-1.0)*cj6*new_r01))), (((cj6*new_r00))+(((-1.0)*new_r01*x566))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x567=IKsin(j8);
IkReal x568=IKcos(j8);
IkReal x569=((1.0)*sj6);
IkReal x570=((1.0)*x568);
IkReal x571=(sj6*x567);
IkReal x572=((1.0)*x567);
IkReal x573=(cj6*x570);
evalcond[0]=(((new_r11*sj6))+((cj6*new_r01))+x567);
evalcond[1]=(((sj6*x568))+((cj6*x567))+new_r01);
evalcond[2]=(((new_r10*sj6))+((cj6*new_r00))+(((-1.0)*x570)));
evalcond[3]=((((-1.0)*new_r00*x569))+((cj6*new_r10))+(((-1.0)*x572)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*x570))+(((-1.0)*new_r01*x569)));
evalcond[5]=((((-1.0)*x573))+x571+new_r00);
evalcond[6]=((((-1.0)*x573))+x571+new_r11);
evalcond[7]=((((-1.0)*cj6*x572))+(((-1.0)*x568*x569))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x574=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj6*x574))+((cj6*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj6*x574))+((cj6*new_r01))))+IKsqr(((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x574))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*sj6*x574))+((cj6*new_r01))), ((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x574))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x575=IKcos(j8);
IkReal x576=IKsin(j8);
IkReal x577=((1.0)*sj6);
IkReal x578=((1.0)*cj6);
IkReal x579=((1.0)*x576);
IkReal x580=(sj6*x575);
IkReal x581=(x576*x578);
evalcond[0]=(((new_r10*sj6))+((cj6*new_r00))+x575);
evalcond[1]=(((new_r11*sj6))+((cj6*new_r01))+(((-1.0)*x579)));
evalcond[2]=(((sj6*x576))+((cj6*x575))+new_r00);
evalcond[3]=(((cj6*new_r10))+(((-1.0)*x579))+(((-1.0)*new_r00*x577)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*x575))+(((-1.0)*new_r01*x577)));
evalcond[5]=(x580+new_r01+(((-1.0)*x581)));
evalcond[6]=(x580+new_r10+(((-1.0)*x581)));
evalcond[7]=((((-1.0)*x576*x577))+(((-1.0)*x575*x578))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r10, new_r11);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x582=IKcos(j8);
IkReal x583=IKsin(j8);
IkReal x584=((1.0)*sj7);
IkReal x585=((1.0)*x582);
IkReal x586=((1.0)*x583);
evalcond[0]=(((new_r02*x582))+new_r20);
evalcond[1]=(new_r10+(((-1.0)*x586)));
evalcond[2]=(new_r11+(((-1.0)*x585)));
evalcond[3]=(((cj7*x583))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x586))+new_r21);
evalcond[5]=((((-1.0)*cj7*x585))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x584))+x583+((cj7*new_r01)));
evalcond[7]=((((-1.0)*new_r20*x584))+(((-1.0)*x585))+((cj7*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
j8eval[1]=IKsign(new_r02);
j8eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
j8eval[0]=new_r02;
j8eval[1]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x587=IKcos(j8);
IkReal x588=((1.0)*(IKsin(j8)));
evalcond[0]=(x587+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x588)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x588)));
evalcond[3]=((((-1.0)*x587))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x589=IKsin(j8);
IkReal x590=((1.0)*(IKcos(j8)));
evalcond[0]=(x589+new_r21);
evalcond[1]=((((-1.0)*x590))+new_r20);
evalcond[2]=((((-1.0)*x589))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x590))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs((cj7*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*new_r01))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((cj7*new_r01), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x591=IKsin(j8);
IkReal x592=IKcos(j8);
IkReal x593=((1.0)*new_r01);
IkReal x594=((1.0)*new_r00);
IkReal x595=((1.0)*x592);
evalcond[0]=(x591+(((-1.0)*cj7*x593)));
evalcond[1]=((((-1.0)*x591))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*x595))+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x593))+((cj7*x591)));
evalcond[4]=((((-1.0)*x594))+(((-1.0)*cj7*x595)));
evalcond[5]=((((-1.0)*x595))+(((-1.0)*cj7*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x596=IKsin(j8);
IkReal x597=IKcos(j8);
IkReal x598=((-1.0)*x597);
evalcond[0]=x596;
evalcond[1]=(new_r22*x596);
evalcond[2]=x598;
evalcond[3]=(new_r22*x598);
evalcond[4]=((((-1.0)*x596))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x597))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x599=IKPowWithIntegerCheck(new_r02,-1);
if(!x599.valid){
continue;
}
CheckValue<IkReal> x600=IKPowWithIntegerCheck(cj7,-1);
if(!x600.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x599.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x600.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x599.value)))+IKsqr(((-1.0)*new_r00*(x600.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r21*(x599.value)), ((-1.0)*new_r00*(x600.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x601=IKsin(j8);
IkReal x602=IKcos(j8);
IkReal x603=((1.0)*new_r01);
IkReal x604=((1.0)*sj7);
IkReal x605=((1.0)*new_r00);
IkReal x606=((1.0)*x602);
evalcond[0]=(((new_r02*x601))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x606))+new_r20);
evalcond[2]=((((-1.0)*x601))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x606)));
evalcond[4]=(((cj7*x601))+(((-1.0)*x603)));
evalcond[5]=((((-1.0)*x605))+(((-1.0)*cj7*x606)));
evalcond[6]=(x601+(((-1.0)*new_r21*x604))+(((-1.0)*cj7*x603)));
evalcond[7]=((((-1.0)*new_r20*x604))+(((-1.0)*x606))+(((-1.0)*cj7*x605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x607=IKPowWithIntegerCheck(new_r02,-1);
if(!x607.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x607.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x607.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x607.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x608=IKsin(j8);
IkReal x609=IKcos(j8);
IkReal x610=((1.0)*new_r01);
IkReal x611=((1.0)*sj7);
IkReal x612=((1.0)*new_r00);
IkReal x613=((1.0)*x609);
evalcond[0]=(((new_r02*x608))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x613))+new_r20);
evalcond[2]=((((-1.0)*x608))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x613))+(((-1.0)*new_r11)));
evalcond[4]=(((cj7*x608))+(((-1.0)*x610)));
evalcond[5]=((((-1.0)*x612))+(((-1.0)*cj7*x613)));
evalcond[6]=((((-1.0)*new_r21*x611))+x608+(((-1.0)*cj7*x610)));
evalcond[7]=((((-1.0)*x613))+(((-1.0)*new_r20*x611))+(((-1.0)*cj7*x612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x614 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x614.valid){
continue;
}
CheckValue<IkReal> x615=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x615.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x614.value)+(((1.5707963267949)*(x615.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[8];
IkReal x616=IKsin(j8);
IkReal x617=IKcos(j8);
IkReal x618=((1.0)*new_r01);
IkReal x619=((1.0)*sj7);
IkReal x620=((1.0)*new_r00);
IkReal x621=((1.0)*x617);
evalcond[0]=(((new_r02*x616))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x621))+new_r20);
evalcond[2]=((((-1.0)*x616))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x621))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x618))+((cj7*x616)));
evalcond[5]=((((-1.0)*x620))+(((-1.0)*cj7*x621)));
evalcond[6]=((((-1.0)*new_r21*x619))+x616+(((-1.0)*cj7*x618)));
evalcond[7]=((((-1.0)*x621))+(((-1.0)*cj7*x620))+(((-1.0)*new_r20*x619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j8eval[0]=IKabs(new_r22);
if( IKabs(j8eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j8]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=new_r22;
op[1]=0;
op[2]=((-1.0)*new_r22);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x623=IKPowWithIntegerCheck(sj7,-1);
if(!x623.valid){
continue;
}
IkReal x622=x623.value;
CheckValue<IkReal> x624=IKPowWithIntegerCheck(cj6,-1);
if(!x624.valid){
continue;
}
CheckValue<IkReal> x625=IKPowWithIntegerCheck(cj7,-1);
if(!x625.valid){
continue;
}
if( IKabs((x622*(x624.value)*(x625.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x622)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x622*(x624.value)*(x625.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7))))))+IKsqr(((-1.0)*new_r20*x622))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x622*(x624.value)*(x625.value)*((((new_r20*sj6))+(((-1.0)*new_r01*sj7))))), ((-1.0)*new_r20*x622));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x626=IKsin(j8);
IkReal x627=IKcos(j8);
IkReal x628=(cj6*new_r00);
IkReal x629=((1.0)*sj7);
IkReal x630=(cj6*new_r01);
IkReal x631=(cj7*sj6);
IkReal x632=((1.0)*sj6);
IkReal x633=((1.0)*x627);
IkReal x634=(cj7*x626);
IkReal x635=((1.0)*x626);
IkReal x636=(sj6*x627);
evalcond[0]=(((sj7*x627))+new_r20);
evalcond[1]=((((-1.0)*x626*x629))+new_r21);
evalcond[2]=(((new_r11*sj6))+x634+x630);
evalcond[3]=((((-1.0)*new_r00*x632))+(((-1.0)*x635))+((cj6*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x632))+(((-1.0)*x633))+((cj6*new_r11)));
evalcond[5]=(x636+new_r01+((cj6*x634)));
evalcond[6]=(((new_r10*sj6))+(((-1.0)*cj7*x633))+x628);
evalcond[7]=((((-1.0)*cj6*cj7*x633))+((sj6*x626))+new_r00);
evalcond[8]=((((-1.0)*cj6*x633))+new_r11+((x626*x631)));
evalcond[9]=((((-1.0)*x631*x633))+(((-1.0)*cj6*x635))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x629))+((new_r11*x631))+((cj7*x630))+x626);
evalcond[11]=((((-1.0)*x633))+((cj7*x628))+(((-1.0)*new_r20*x629))+((new_r10*x631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x638=IKPowWithIntegerCheck(sj7,-1);
if(!x638.valid){
continue;
}
IkReal x637=x638.value;
CheckValue<IkReal> x639=IKPowWithIntegerCheck(sj6,-1);
if(!x639.valid){
continue;
}
if( IKabs((x637*(x639.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x637)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x637*(x639.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20))))))+IKsqr(((-1.0)*new_r20*x637))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((x637*(x639.value)*(((((-1.0)*new_r00*sj7))+(((-1.0)*cj6*cj7*new_r20))))), ((-1.0)*new_r20*x637));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x640=IKsin(j8);
IkReal x641=IKcos(j8);
IkReal x642=(cj6*new_r00);
IkReal x643=((1.0)*sj7);
IkReal x644=(cj6*new_r01);
IkReal x645=(cj7*sj6);
IkReal x646=((1.0)*sj6);
IkReal x647=((1.0)*x641);
IkReal x648=(cj7*x640);
IkReal x649=((1.0)*x640);
IkReal x650=(sj6*x641);
evalcond[0]=(((sj7*x641))+new_r20);
evalcond[1]=((((-1.0)*x640*x643))+new_r21);
evalcond[2]=(((new_r11*sj6))+x644+x648);
evalcond[3]=(((cj6*new_r10))+(((-1.0)*x649))+(((-1.0)*new_r00*x646)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*x647))+(((-1.0)*new_r01*x646)));
evalcond[5]=(((cj6*x648))+x650+new_r01);
evalcond[6]=(((new_r10*sj6))+(((-1.0)*cj7*x647))+x642);
evalcond[7]=(((sj6*x640))+new_r00+(((-1.0)*cj6*cj7*x647)));
evalcond[8]=((((-1.0)*cj6*x647))+((x640*x645))+new_r11);
evalcond[9]=((((-1.0)*cj6*x649))+(((-1.0)*x645*x647))+new_r10);
evalcond[10]=(((new_r11*x645))+(((-1.0)*new_r21*x643))+x640+((cj7*x644)));
evalcond[11]=((((-1.0)*x647))+((new_r10*x645))+(((-1.0)*new_r20*x643))+((cj7*x642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x651=IKPowWithIntegerCheck(IKsign(sj7),-1);
if(!x651.valid){
continue;
}
CheckValue<IkReal> x652 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x652.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x651.value)))+(x652.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[12];
IkReal x653=IKsin(j8);
IkReal x654=IKcos(j8);
IkReal x655=(cj6*new_r00);
IkReal x656=((1.0)*sj7);
IkReal x657=(cj6*new_r01);
IkReal x658=(cj7*sj6);
IkReal x659=((1.0)*sj6);
IkReal x660=((1.0)*x654);
IkReal x661=(cj7*x653);
IkReal x662=((1.0)*x653);
IkReal x663=(sj6*x654);
evalcond[0]=(((sj7*x654))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x653*x656)));
evalcond[2]=(((new_r11*sj6))+x657+x661);
evalcond[3]=((((-1.0)*new_r00*x659))+((cj6*new_r10))+(((-1.0)*x662)));
evalcond[4]=(((cj6*new_r11))+(((-1.0)*new_r01*x659))+(((-1.0)*x660)));
evalcond[5]=(((cj6*x661))+x663+new_r01);
evalcond[6]=(((new_r10*sj6))+x655+(((-1.0)*cj7*x660)));
evalcond[7]=((((-1.0)*cj6*cj7*x660))+((sj6*x653))+new_r00);
evalcond[8]=((((-1.0)*cj6*x660))+((x653*x658))+new_r11);
evalcond[9]=((((-1.0)*cj6*x662))+(((-1.0)*x658*x660))+new_r10);
evalcond[10]=(x653+((new_r11*x658))+((cj7*x657))+(((-1.0)*new_r21*x656)));
evalcond[11]=((((-1.0)*new_r20*x656))+(((-1.0)*x660))+((new_r10*x658))+((cj7*x655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j12;
vinfos[6].indices[0] = _ij12[0];
vinfos[6].indices[1] = _ij12[1];
vinfos[6].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return ""; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
