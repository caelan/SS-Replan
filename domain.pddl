(define (domain nvidia-tamp)
  (:requirements :strips :equality)
  (:constants @stove) ; @world @gripper
  (:predicates
    (Stackable ?o ?r)
    (Stove ?r)
    (Type ?t ?b)

    (Pose ?o ?p)
    (Supported ?o ?p ?r)
    (Grasp ?o ?g)
    (Kin ?o ?p ?g ?bq ?aq ?bt)
    (BaseMotion ?bq1 ?bq2 ?bt)
    (ArmMotion ?qq1 ?aq2 ?at)
    (BTraj ?bt)
    (ATraj ?at)

    (CFreePosePose ?o ?p ?o2 ?p2)
    (CFreeApproachPose ?o ?p ?g ?o2 ?p2)
    (CFreeTrajPose ?t ?o2 ?p2)
    (CFreeTrajGraspPose ?t ?a ?o1 ?g1 ?o2 ?p2)

    (AtPose ?o ?p)
    (AtGrasp ?o ?g)
    (HandEmpty)
    (AtBConf ?bq)
    (AtAConf ?aq)
    (CanMove)
    (Cooked ?o)

    (On ?o ?r)
    (Holding ?o)
    (UnsafePose ?o ?p)
    (UnsafeApproach ?o ?p ?g)
    (UnsafeATraj ?at)
    (UnsafeBTraj ?bt)
  )
  (:functions
    (Distance ?bq1 ?bq2)
    (MoveCost ?bt)
    (PickCost)
    (PlaceCost)
  )

  (:action move_base
    :parameters (?bq1 ?bq2 ?bt)
    :precondition (and (BaseMotion ?bq1 ?bq2 ?bt)
                       (AtBConf ?bq1) (CanMove)
                       ;(not (UnsafeBTraj ?bt))
                   )
    :effect (and (AtBConf ?bq2)
                 (not (AtBConf ?bq1)) (not (CanMove))
                 (increase (total-cost) (Distance ?bq1 ?bq2)))
                 ; (increase (total-cost) (MoveCost ?bt)))
  )
  ;(:action move_arm
  ;  :parameters (?q1 ?q2 ?t)
  ;  :precondition (and (ArmMotion ?a ?q1 ?t ?q2)
  ;                     (AtAConf ?a ?q1))
  ;  :effect (and (AtAConf ?a ?q2)
  ;               (not (AtAConf ?a ?q1)))
  ;)
  (:action pick
    :parameters (?o ?p ?g ?bq ?aq ?at)
    :precondition (and (Kin ?o ?p ?g ?bq ?aq ?at)
                       (AtPose ?o ?p) (HandEmpty) (AtBConf ?bq) ; (AtAConf ?aq)
                       ; (not (UnsafeApproach ?o ?p ?g))
                       ;(not (UnsafeATraj ?at))
                  )
    :effect (and (AtGrasp ?o ?g) (CanMove)
                 (not (AtPose ?o ?p)) (not (HandEmpty))
                 (increase (total-cost) (PickCost)))
  )
  (:action place
    :parameters (?o ?p ?g ?bq ?aq ?at)
    :precondition (and (Kin ?o ?p ?g ?bq ?aq ?at)
                       (AtGrasp ?o ?g) (AtBConf ?bq) ; (AtAConf ?aq)
                       ;(not (UnsafePose ?o ?p))
                       ;(not (UnsafeApproach ?o ?p ?g))
                       ;(not (UnsafeATraj ?t))
                  )
    :effect (and (AtPose ?o ?p) (HandEmpty) (CanMove)
                 (not (AtGrasp ?o ?g))
                 (increase (total-cost) (PlaceCost)))
  )
  ; TODO: pull

  (:action cook
    :parameters (?r)
    :precondition (Type ?r @stove)
    :effect (forall (?o) (when (On ?o ?r) (Cooked ?o)))
  )

  (:derived (On ?o ?r)
    (exists (?p) (and (Supported ?o ?p ?r)
                      (AtPose ?o ?p)))
  )
  (:derived (Holding ?o)
    (exists (?g) (and (Grasp ?o ?g)
                      (AtGrasp ?o ?g)))
  )

;  (:derived (UnsafePose ?o ?p)
;    (exists (?o2 ?p2) (and (Pose ?o ?p) (Pose ?o2 ?p2)
;                           (not (CFreePosePose ?o ?p ?o2 ?p2))
;                           (AtPose ?o2 ?p2)))
;  )
;  (:derived (UnsafeApproach ?o ?p ?g)
;    (exists (?o2 ?p2) (and (Pose ?o ?p) (Grasp ?o ?g) (Pose ?o2 ?p2)
;                           (not (CFreeApproachPose ?o ?p ?g ?o2 ?p2))
;                           (AtPose ?o2 ?p2)))
;  )
;
;  (:derived (UnsafeATraj ?t)
;    (exists (?o2 ?p2) (and (ATraj ?t) (Pose ?o2 ?p2)
;                           (not (CFreeTrajPose ?t ?o2 ?p2))
;                           (AtPose ?o2 ?p2)))
;  )

  ;(:derived (UnsafeBTraj ?t) (or
  ;  ;(exists (?o2 ?p2) (and (BTraj ?t) (Pose ?o2 ?p2)
  ;  ;                       (not (CFreeTrajPose ?t ?o2 ?p2))
  ;  ;                       (AtPose ?o2 ?p2)))
  ;  (exists (?a ?o1 ?g1 ?o2 ?p2) (and (BTraj ?t) (Arm ?a) (Grasp ?o1 ?g1) (Pose ?o2 ?p2)
  ;                                    (not (CFreeTrajGraspPose ?t ?a ?o1 ?g1 ?o2 ?p2)) (not (= ?o1 ?o2))
  ;                                    (AtGrasp ?a ?o1 ?g1) (AtPose ?o2 ?p2)))
  ;))

)