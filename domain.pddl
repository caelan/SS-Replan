(define (domain nvidia-tamp)
  (:requirements :strips :equality)
  (:constants @world @stove) ; @world @gripper
  (:predicates
    (Stackable ?o ?r)
    (Stove ?r)
    (Type ?t ?b)
    (NoisyBase)

    (Angle ?j ?a)
    (Pose ?o ?p)
    (Supported ?o ?p ?r)
    (Grasp ?o ?g)
    (Kin ?o ?p ?g ?bq ?aq ?bt)
    (Pull ?j ?q1 ?q2 ?bq ?aq ?at)
    (BaseMotion ?bq1 ?bq2 ?bt)
    (ArmMotion ?qq1 ?aq2 ?at)
    (CalibrateMotion ?bq ?aq ?at)
    (BTraj ?bt)
    (ATraj ?at)
    (Conf ?j ?q)

    (CFreePosePose ?o ?p ?o2 ?p2)
    (CFreeApproachPose ?o ?p ?g ?o2 ?p2)
    (CFreeApproachAngle ?o ?p ?g ?j ?a)
    (CFreeTrajPose ?t ?o2 ?p2)
    (CFreeTrajAngle ?at ?j ?a)

    (AtAngle ?j ?q)
    (AtPose ?o ?p)
    (AtGrasp ?o ?g)
    (HandEmpty)
    (AtBConf ?bq)
    (AtAConf ?aq)
    (CanMove)
    (Cooked ?o)
    (Calibrated)

    (Status ?s)
    (DoorStatus ?j ?s)
    (AngleWithin ?j ?a ?s)

    (On ?o ?r)
    (Holding ?o)
    (UnsafePose ?o ?p)
    (UnsafeApproach ?o ?p ?g)
    (UnsafeATraj ?at)
    (UnsafeBTraj ?bt)

    (RelPose ?o1 ?rp ?o2)
    (AtRelPose ?o1 ?rp ?o2)
    (AtWorldPose ?o ?p)
    (PoseKin ?o1 ?p1 ?rp ?o2 ?p2)
    (AngleKin ?j ?p ?a)
  )
  (:functions
    (Distance ?bq1 ?bq2)
    (MoveCost ?bt)
    (PickCost)
    (PlaceCost)
    (PullCost)
    (CookCost)
  )

  (:action move_base
    :parameters (?bq1 ?bq2 ?bt)
    :precondition (and (BaseMotion ?bq1 ?bq2 ?bt)
                       (AtBConf ?bq1) (CanMove) (Calibrated)
                   )
    :effect (and (AtBConf ?bq2)
                 (not (AtBConf ?bq1)) (not (CanMove))
                 (when (NoisyBase) (not (Calibrated)))
                 (increase (total-cost) (Distance ?bq1 ?bq2)))
                 ; (increase (total-cost) (MoveCost ?bt)))
  )
  ;(:action move_arm
  ;  :parameters (?q1 ?q2 ?t)
  ;  :precondition (and (ArmMotion ?a ?q1 ?t ?q2)
  ;                     (AtAConf ?a ?q1))
  ;  :effect (and (AtAConf ?a ?q2)
  ;               (not (AtAConf ?a ?q1)))
  ;)
  (:action calibrate
    :parameters (?bq ?aq ?at)
    :precondition (and (CalibrateMotion ?bq ?aq ?at)
                       (AtBConf ?bq) ; (AtAConf ?aq)
                       (not (Calibrated))
                       ; TODO: visibility constraints
                   )
    :effect (and (Calibrated) ; Could make this be a new pose ?bq2
                 ; (not (AtBConf ?bq))
                 (increase (total-cost) (CalibrateCost)))
  )
  (:action pick
    :parameters (?o ?p ?g ?bq ?aq ?at)
    :precondition (and (Kin ?o ?p ?g ?bq ?aq ?at)
                       (AtPose ?o ?p) (HandEmpty) (AtBConf ?bq) (Calibrated) ; (AtAConf ?aq)
                       (not (UnsafeApproach ?o ?p ?g))
                       (not (UnsafeATraj ?at))
                  )
    :effect (and (AtGrasp ?o ?g) (CanMove)
                 (not (AtPose ?o ?p)) (not (HandEmpty))
                 (increase (total-cost) (PickCost)))
  )
  (:action place
    :parameters (?o ?p ?g ?bq ?aq ?at)
    :precondition (and (Kin ?o ?p ?g ?bq ?aq ?at)
                       (AtGrasp ?o ?g) (AtBConf ?bq) (Calibrated) ; (AtAConf ?aq)
                       (not (UnsafePose ?o ?p))
                       (not (UnsafeApproach ?o ?p ?g))
                       (not (UnsafeATraj ?at))
                  )
    :effect (and (AtPose ?o ?p) (HandEmpty) (CanMove)
                 (not (AtGrasp ?o ?g))
                 (increase (total-cost) (PlaceCost)))
  )
  (:action pull
    :parameters (?j ?a1 ?a2 ?bq ?aq ?at)
    :precondition (and (Pull ?j ?a1 ?a2 ?bq ?aq ?at)
                       (AtAngle ?j ?a1) (HandEmpty) (AtBConf ?bq) (Calibrated); (AtAConf ?aq)
                       ; TODO: final conf safe
                       (not (UnsafeApproach ?o ?p ?g))
                       (not (UnsafeATraj ?at))
                  )
    :effect (and (AtAngle ?j ?a2) (CanMove)
                 (not (AtAngle ?j ?a1))
                 (increase (total-cost) (PullCost)))
  )

  (:action cook
    :parameters (?r)
    :precondition (Type ?r @stove)
    :effect (and (forall (?o) (when (On ?o ?r) (Cooked ?o)))
                 (increase (total-cost) (PullCost)))
  )

  (:derived (On ?o ?r)
    (exists (?p) (and (Supported ?o ?p ?r)
                      (AtPose ?o ?p)))
  )
  (:derived (Holding ?o)
    (exists (?g) (and (Grasp ?o ?g)
                      (AtGrasp ?o ?g)))
  )
  (:derived (DoorStatus ?j ?s)
    (exists (?a) (and (AngleWithin ?j ?a ?s)
                      (AtAngle ?j ?a)))
  )

  ; https://github.mit.edu/mtoussai/KOMO-stream/blob/master/03-Caelans-pddlstreamExample/retired/domain.pddl
  (:derived (AtWorldPose ?o1 ?p1) (or
    (and (RelPose ?o1 ?p1 @world)
         (AtRelPose ?o1 ?p1 @world))
    (exists (?rp ?o2 ?p2) (and (PoseKin ?o1 ?p1 ?rp ?o2 ?p2)
            (AtWorldPose ?o2 ?p2) (AtRelPose ?o1 ?rp ?o2)))
    (exists (?a) (and (AngleKin ?o1 ?p1 ?a)
            (AtAngle ?o1 ?a)))
  ))

  (:derived (UnsafePose ?o ?p)
    (exists (?o2 ?p2) (and (Pose ?o ?p) (Pose ?o2 ?p2)
                           (not (CFreePosePose ?o ?p ?o2 ?p2))
                           (AtPose ?o2 ?p2)))
  )
  (:derived (UnsafeApproach ?o ?p ?g) (and (Pose ?o ?p) (Grasp ?o ?g) (or
    (exists (?o2 ?p2) (and (Pose ?o2 ?p2)
                           (not (CFreeApproachPose ?o ?p ?g ?o2 ?p2))
                           (AtPose ?o2 ?p2)))
    (exists (?j ?a) (and (Angle ?j ?a)
                         (not (CFreeApproachAngle ?o ?p ?g ?j ?a))
                         (AtAngle ?j ?a)))
    ))
  )
  (:derived (UnsafeATraj ?at) (and (ATraj ?at) (or
    (exists (?o2 ?p2) (and (Pose ?o2 ?p2)
                          (not (CFreeTrajPose ?at ?o2 ?p2))
                          (AtPose ?o2 ?p2)))
    (exists (?j ?a) (and (Angle ?j ?a)
                         (not (CFreeTrajAngle ?at ?j ?a))
                         (AtAngle ?j ?a)))
   ))
  )
  ; TODO: check collision between two objects in a tray
)